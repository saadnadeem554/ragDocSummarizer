[
  "19.1.0 (March 28, 2025)\n\nOwner Stack\n\nAn Owner Stack is a string representing the components that are directly responsible for rendering a particular component. You can log Owner Stacks when debugging or use Owner Stacks to enhance error overlays or other development tools. Owner Stacks are only available in development builds. Component Stacks in production are unchanged.\n\nAn Owner Stack is a development-only stack trace that helps identify which components are responsible for rendering a particular component. An Owner Stack is distinct from a Component Stacks, which shows the hierarchy of components leading to an error.",
  "The captureOwnerStack API is only available in development mode and returns a Owner Stack, if available. The API can be used to enhance error overlays or log component relationships when debugging. #29923, #32353, #30306, #32538, #32529, #32538\n\nReact\n\nEnhanced support for Suspense boundaries to be used anywhere, including the client, server, and during hydration. #32069, #32163, #32224, #32252\n\nReduced unnecessary client rendering through improved hydration scheduling #31751\n\nIncreased priority of client rendered Suspense boundaries #31776\n\nFixed frozen fallback states by rendering unfinished Suspense boundaries on the client. #31620\n\nReduced garbage collection pressure by improving Suspense boundary retries. #31667",
  "Fixed erroneous “Waiting for Paint” log when the passive effect phase was not delayed #31526\n\nFixed a regression causing key warnings for flattened positional children in development mode. #32117\n\nUpdated useId to use valid CSS selectors, changing format from :r123: to «r123». #32001\n\nAdded a dev-only warning for null/undefined created in useEffect, useInsertionEffect, and useLayoutEffect. #32355\n\nFixed a bug where dev-only methods were exported in production builds. React.act is no longer available in production builds. #32200\n\nImproved consistency across prod and dev to improve compatibility with Google Closure Complier and bindings #31808\n\nImprove passive effect scheduling for consistent task yielding. #31785",
  "Fixed asserts in React Native when passChildrenWhenCloningPersistedNodes is enabled for OffscreenComponent rendering. #32528\n\nFixed component name resolution for Portal #32640\n\nAdded support for beforetoggle and toggle events on the dialog element. #32479 #32479\n\nReact DOM\n\nFixed double warning when the href attribute is an empty string #31783\n\nFixed an edge case where getHoistableRoot() didn’t work properly when the container was a Document #32321\n\nRemoved support for using HTML comments (e.g. <!-- -->) as a DOM container. #32250\n\nAdded support for <script> and <template> tags to be nested within <select> tags. #31837\n\nFixed responsive images to be preloaded as HTML instead of headers #32445\n\nuse-sync-external-store",
  "use-sync-external-store\n\nAdded exports field to package.json for use-sync-external-store to support various entrypoints. #25231\n\nReact Server Components\n\nAdded unstable_prerender, a new experimental API for prerendering React Server Components on the server #31724\n\nFixed an issue where streams would hang when receiving new chunks after a global error #31840, #31851\n\nFixed an issue where pending chunks were counted twice. #31833\n\nAdded support for streaming in edge environments #31852\n\nAdded support for sending custom error names from a server so that they are available in the client for console replaying. #32116\n\nUpdated the server component wire format to remove IDs for hints and console.log because they have no return value #31671",
  "Exposed registerServerReference in client builds to handle server references in different environments. #32534\n\nAdded react-server-dom-parcel package which integrates Server Components with the Parcel bundler #31725, #32132, #31799, #32294, #31741\n\n19.0.0 (December 5, 2024)\n\nBelow is a list of all new features, APIs, deprecations, and breaking changes. Read React 19 release post and React 19 upgrade guide for more information.\n\nNote: To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. We recommend upgrading to React 18.3.1 first to help identify any issues before upgrading to React 19.\n\nNew Features\n\nReact",
  "New Features\n\nReact\n\nActions: startTransition can now accept async functions. Functions passed to startTransition are called “Actions”. A given Transition can include one or more Actions which update state in the background and update the UI with one commit. In addition to updating state, Actions can now perform side effects including async requests, and the Action will wait for the work to finish before finishing the Transition. This feature allows Transitions to include side effects like fetch() in the pending state, and provides support for error handling, and optimistic updates.",
  "useActionState: is a new hook to order Actions inside of a Transition with access to the state of the action, and the pending state. It accepts a reducer that can call Actions, and the initial state used for first render. It also accepts an optional string that is used if the action is passed to a form action prop to support progressive enhancement in forms.\n\nuseOptimistic: is a new hook to update state while a Transition is in progress. It returns the state, and a set function that can be called inside a transition to “optimistically” update the state to expected final value immediately while the Transition completes in the background. When the transition finishes, the state is updated to the new value.",
  "use: is a new API that allows reading resources in render. In React 19, use accepts a promise or Context. If provided a promise, use will suspend until a value is resolved. use can only be used in render but can be called conditionally.\n\nref as a prop: Refs can now be used as props, removing the need for forwardRef.\n\nSuspense sibling pre-warming: When a component suspends, React will immediately commit the fallback of the nearest Suspense boundary, without waiting for the entire sibling tree to render. After the fallback commits, React will schedule another render for the suspended siblings to “pre-warm” lazy requests.\n\nReact DOM Client",
  "React DOM Client\n\n<form> action prop: Form Actions allow you to manage forms automatically and integrate with useFormStatus. When a <form> action succeeds, React will automatically reset the form for uncontrolled components. The form can be reset manually with the new requestFormReset API.\n\n<button> and <input> formAction prop: Actions can be passed to the formAction prop to configure form submission behavior. This allows using different Actions depending on the input.\n\nuseFormStatus: is a new hook that provides the status of the parent <form> action, as if the form was a Context provider. The hook returns the values: pending, data, method, and action.",
  "Support for Document Metadata: We’ve added support for rendering document metadata tags in components natively. React will automatically hoist them into the <head> section of the document.\n\nSupport for Stylesheets: React 19 will ensure stylesheets are inserted into the <head> on the client before revealing the content of a Suspense boundary that depends on that stylesheet.\n\nSupport for async scripts: Async scripts can be rendered anywhere in the component tree and React will handle ordering and deduplication.",
  "Support for preloading resources: React 19 ships with preinit, preload, prefetchDNS, and preconnect APIs to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also be used to prefetch resources used by an anticipated navigation.\n\nReact DOM Server\n\nAdded prerender and prerenderToNodeStream APIs for static site generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. Unlike renderToString, they wait for data to load for HTML generation.\n\nReact Server Components",
  "React Server Components\n\nRSC features such as directives, server components, and server functions are now stable. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a react-server export condition for use in frameworks that support the Full-stack React Architecture. The underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. See docs for how to support React Server Components.\n\nDeprecations\n\nDeprecated: element.ref access: React 19 supports ref as a prop, so we’re deprecating element.ref in favor of element.props.ref. Accessing will result in a warning.",
  "react-test-renderer: In React 19, react-test-renderer logs a deprecation warning and has switched to concurrent rendering for web usage. We recommend migrating your tests to @testing-library/react or @testing-library/react-native\n\nBreaking Changes\n\nReact 19 brings in a number of breaking changes, including the removals of long-deprecated APIs. We recommend first upgrading to 18.3.1, where we've added additional deprecation warnings. Check out the upgrade guide for more details and guidance on codemodding.\n\nReact\n\nNew JSX Transform is now required: We introduced a new JSX transform in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform.",
  "Errors in render are not re-thrown: Errors that are not caught by an Error Boundary are now reported to window.reportError. Errors that are caught by an Error Boundary are reported to console.error. We’ve introduced onUncaughtError and onCaughtError methods to createRoot and hydrateRoot to customize this error handling.\n\nRemoved: propTypes: Using propTypes will now be silently ignored. If required, we recommend migrating to TypeScript or another type-checking solution.\n\nRemoved: defaultProps for functions: ES6 default parameters can be used in place. Class components continue to support defaultProps since there is no ES6 alternative.\n\nRemoved: contextTypes and getChildContext: Legacy Context for class components has been removed in favor of the contextType API.",
  "Removed: string refs: Any usage of string refs need to be migrated to ref callbacks.\n\nRemoved: Module pattern factories: A rarely used pattern that can be migrated to regular functions.\n\nRemoved: React.createFactory: Now that JSX is broadly supported, all createFactory usage can be migrated to JSX components.\n\nRemoved: react-test-renderer/shallow: This has been a re-export of react-shallow-renderer since React 18. If needed, you can continue to use the third-party package directly. We recommend using @testing-library/react or @testing-library/react-native instead.\n\nReact DOM\n\nRemoved: react-dom/test-utils: We’ve moved act from react-dom/test-utils to react. All other utilities have been removed.",
  "Removed: ReactDOM.render, ReactDOM.hydrate: These have been removed in favor of the concurrent equivalents: ReactDOM.createRoot and ReactDOM.hydrateRoot.\n\nRemoved: unmountComponentAtNode: Removed in favor of root.unmount().\n\nRemoved: ReactDOM.findDOMNode: You can replace ReactDOM.findDOMNode with DOM Refs.\n\nNotable Changes\n\nReact\n\n<Context> as a provider: You can now render <Context> as a provider instead of <Context.Provider>.\n\nCleanup functions for refs: When the component unmounts, React will call the cleanup function returned from the ref callback.\n\nuseDeferredValue initial value argument: When provided, useDeferredValue will return the initial value for the initial render of a component, then schedule a re-render in the background with the deferredValue returned.",
  "Support for Custom Elements: React 19 now passes all tests on Custom Elements Everywhere.\n\nStrictMode changes: useMemo and useCallback will now reuse the memoized results from the first render, during the second render. Additionally, StrictMode will now double-invoke ref callback functions on initial mount.\n\nUMD builds removed: To load React 19 with a script tag, we recommend using an ESM-based CDN such as esm.sh.\n\nReact DOM\n\nDiffs for hydration errors: In the case of a mismatch, React 19 logs a single error with a diff of the mismatched content.\n\nCompatibility with third-party scripts and extensions: React will now force a client re-render to fix up any mismatched content caused by elements inserted by third-party JS.\n\nTypeScript Changes",
  "TypeScript Changes\n\nThe most common changes can be codemodded with npx types-react-codemod@latest preset-19 ./path-to-your-react-ts-files.\n\nRemoved deprecated TypeScript types:\n\nReactChild (replacement: React.ReactElement | number | string)\n\nReactFragment (replacement: Iterable<React.ReactNode>)\n\nReactNodeArray (replacement: ReadonlyArray<React.ReactNode>)\n\nReactText (replacement: number | string)\n\nVoidFunctionComponent (replacement: FunctionComponent)\n\nVFC (replacement: FC)\n\nMoved to prop-types: Requireable, ValidationMap, Validator, WeakValidationMap\n\nMoved to create-react-class: ClassicComponentClass, ClassicComponent, ClassicElement, ComponentSpec, Mixin, ReactChildren, ReactHTML, ReactSVG, SFCFactory",
  "Disallow implicit return in refs: refs can now accept cleanup functions. When you return something else, we can’t tell if you intentionally returned something not meant to clean up or returned the wrong value. Implicit returns of anything but functions will now error.\n\nRequire initial argument to useRef: The initial argument is now required to match useState, createContext etc\n\nRefs are mutable by default: Ref objects returned from useRef() are now always mutable instead of sometimes being immutable. This feature was too confusing for users and conflicted with legit cases where refs were managed by React and manually written to.\n\nStrict ReactElement typing: The props of React elements now default to unknown instead of any if the element is typed as ReactElement",
  "JSX namespace in TypeScript: The global JSX namespace is removed to improve interoperability with other libraries using JSX. Instead, the JSX namespace is available from the React package: import { JSX } from 'react'\n\nBetter useReducer typings: Most useReducer usage should not require explicit type arguments. For example, diff -useReducer<React.Reducer<State, Action>>(reducer) +useReducer(reducer) or diff -useReducer<React.Reducer<State, Action>>(reducer) +useReducer<State, Action>(reducer)\n\nAll Changes\n\nReact\n\nAdd support for async Actions (#26621, #26726, #28078, #28097, #29226, #29618, #29670, #26716 by @acdlite and @sebmarkbage)",
  "Add useActionState() hook to update state based on the result of a Form Action (#27270, #27278, #27309, #27302, #27307, #27366, #27370, #27321, #27374, #27372, #27397, #27399, #27460, #28557, #27570, #27571, #28631, #28788, #29694, #29695, #29694, #29665, #28232, #28319 by @acdlite, @eps1lon, and @rickhanlonii)\n\nAdd use() API to read resources in render (#25084, #25202, #25207, #25214, #25226, #25247, #25539, #25538, #25537, #25543, #25561, #25620, #25615, #25922, #25641, #25634, #26232, #26536, #26739, #28233 by @acdlite, @MofeiZ, @sebmarkbage, @sophiebits, @eps1lon, and @hansottowirtz)\n\nAdd useOptimistic() hook to display mutated state optimistically during an async mutation (#26740, #26772, #27277, #27453, #27454, #27936 by @acdlite)",
  "Added an initialValue argument to useDeferredValue() hook (#27500, #27509, #27512, #27888, #27550 by @acdlite)\n\nSupport refs as props, warn on element.ref access (#28348, #28464, #28731 by @acdlite)\n\nSupport Custom Elements (#22184, #26524, #26523, #27511, #24541 by @josepharhar, @sebmarkbage, @gnoff and @eps1lon)\n\nAdd ref cleanup function (#25686, #28883, #28910 by @sammy-SC, @jackpope, and @kassens)\n\nSibling pre-rendering replaced by sibling pre-warming (#26380, #26549, #30761, #30800, #30762, #30879, #30934, #30952, #31056, #31452 by @sammy-SC, @acdlite, @gnoff, @jackpope, @rickhanlonii)\n\nDon’t rethrow errors at the root (#28627, #28641 by @sebmarkbage)\n\nBatch sync discrete, continuous, and default lanes (#25700 by @tyao1)",
  "Switch <Context> to mean <Context.Provider> (#28226 by @gaearon)\n\nChanges to StrictMode\n\nHandle info, group, and groupCollapsed in StrictMode logging (#25172 by @timneutkens)\n\nRefs are now attached/detached/attached in StrictMode (#25049 by @sammy-SC)\n\nFix useSyncExternalStore() hydration in StrictMode (#26791 by @sophiebits)\n\nAlways trigger componentWillUnmount() in StrictMode (#26842 by @tyao1)\n\nRestore double invoking useState() and useReducer() initializer functions in StrictMode (#28248 by @eps1lon)\n\nReuse memoized result from first pass (#25583 by @acdlite)\n\nFix useId() in StrictMode (#25713 by @gnoff)\n\nAdd component name to StrictMode error messages (#25718 by @sammy-SC)\n\nAdd support for rendering BigInt (#24580 by @eps1lon)",
  "act() no longer checks shouldYield which can be inaccurate in test environments (#26317 by @acdlite)\n\nWarn when keys are spread with props (#25697, #26080 by @sebmarkbage and @kassens)\n\nGenerate sourcemaps for production build artifacts (#26446 by @markerikson)\n\nImprove stack diffing algorithm (#27132 by @KarimP)\n\nSuspense throttling lowered from 500ms to 300ms (#26803 by @acdlite)\n\nLazily propagate context changes (#20890 by @acdlite and @gnoff)\n\nImmediately rerender pinged fiber (#25074 by @acdlite)\n\nMove update scheduling to microtask (#26512 by @acdlite)\n\nConsistently apply throttled retries (#26611, #26802 by @acdlite)\n\nSuspend Thenable/Lazy if it's used in React.Children (#28284 by @sebmarkbage)\n\nDetect infinite update loops caused by render phase updates (#26625 by @acdlite)",
  "Update conditional hooks warning (#29626 by @sophiebits)\n\nUpdate error URLs to go to new docs (#27240 by @rickhanlonii)\n\nRename the react.element symbol to react.transitional.element (#28813 by @sebmarkbage)\n\nFix crash when suspending in shell during useSyncExternalStore() re-render (#27199 by @acdlite)\n\nFix incorrect “detected multiple renderers\" error in tests (#22797 by @eps1lon)\n\nFix bug where effect cleanup may be called twice after bailout (#26561 by @acdlite)\n\nFix suspending in shell during discrete update (#25495 by @acdlite)\n\nFix memory leak after repeated setState bailouts (#25309 by @acdlite)\n\nFix useSyncExternalStore() dropped update when state is dispatched in render phase (#25578 by @pandaiolo)\n\nFix logging when rendering a lazy fragment (#30372 by @tom-sherman)",
  "Remove string refs (#25383, #28322 by @eps1lon and @acdlite)\n\nRemove Legacy Context (#30319 by @kassens)\n\nRemove RefreshRuntime.findAffectedHostInstances (#30538 by @gaearon)\n\nRemove client caching from cache() API (#27977, #28250 by @acdlite and @gnoff)\n\nRemove propTypes (#28324, #28326 by @gaearon)\n\nRemove defaultProps support, except for classes (#28733 by @acdlite)\n\nRemove UMD builds (#28735 by @gnoff)\n\nRemove delay for non-transition updates (#26597 by @acdlite)\n\nRemove createFactory (#27798 by @kassens)\n\nReact DOM\n\nAdds Form Actions to handle form submission (#26379, #26674, #26689, #26708, #26714, #26735, #26846, #27358, #28056 by @sebmarkbage, @acdlite, and @jupapios)",
  "Add useFormStatus() hook to provide status information of the last form submission (#26719, #26722, #26788, #29019, #28728, #28413 by @acdlite and @eps1lon)\n\nSupport for Document Metadata. Adds preinit, preinitModule, preconnect, prefetchDNS, preload, and preloadModule APIs.",
  "#25060, #25243, #25388, #25432, #25436, #25426, #25500, #25480, #25508, #25515, #25514, #25532, #25536, #25534, #25546, #25559, #25569, #25599, #25689, #26106, #26152, #26239, #26237, #26280, #26154, #26256, #26353, #26427, #26450, #26502, #26514, #26531, #26532, #26557, #26871, #26881, #26877, #26873, #26880, #26942, #26938, #26940, #26939, #27030, #27201, #27212, #27217, #27218, #27220, #27224, #27223, #27269, #27260, #27347, #27346, #27361, #27400, #27541, #27610, #28110, #29693, #29732, #29811, #27586, #28069 by @gnoff, @sebmarkbage, @acdlite, @kassens, @sokra, @sweetliquid\n\nAdd fetchPriority to <img> and <link> (#25927 by @styfle)\n\nAdd support for SVG transformOrigin prop (#26130 by @arav-ind)\n\nAdd support for onScrollEnd event (#26789 by @devongovett)",
  "Allow <hr> as child of <select> (#27632 by @SouSingh)\n\nAdd support for Popover API (#27981 by @eps1lon)\n\nAdd support for inert (#24730 by @eps1lon)\n\nAdd support for imageSizes and imageSrcSet (#22550 by @eps1lon)\n\nSynchronously flush transitions in popstate events (#26025, #27559, #27505, #30759 by @tyao1 and @acdlite)\n\nflushSync exhausts queue even if something throws (#26366 by @acdlite)\n\nThrow error if react and react-dom versions don’t match (#29236 by @acdlite)\n\nEnsure srcset and src are assigned last on <img> instances (#30340 by @gnoff)\n\nJavascript URLs are replaced with functions that throw errors (#26507, #29808 by @sebmarkbage and @kassens)\n\nTreat toggle and beforetoggle as discrete events (#29176 by @eps1lon)",
  "Filter out empty src and href attributes (unless for <a href=”” />) (#18513, #28124 by @bvaughn and @eps1lon)\n\nFix unitless scale style property (#25601 by @JonnyBurger)\n\nFix onChange error message for controlled <select> (#27740 by @Biki-das)\n\nFix focus restore in child windows after element reorder (#30951 by @ling1726)\n\nRemove render, hydrate, findDOMNode, unmountComponentAtNode, unstable_createEventHandle, unstable_renderSubtreeIntoContainer, and unstable_runWithPriority. Move createRoot and hydrateRoot to react-dom/client. (#28271 by @gnoff)\n\nRemove test-utils (#28541 by @eps1lon)\n\nRemove unstable_flushControlled (#26397 by @kassens)\n\nRemove legacy mode (#28468 by @gnoff)\n\nRemove renderToStaticNodeStream() (#28873 by @gnoff)",
  "Remove unstable_renderSubtreeIntoContainer (#29771 by @kassens)\n\nReact DOM Server\n\nStable release of React Server Components (Many, many PRs by @sebmarkbage, @acdlite, @gnoff, @sammy-SC, @gaearon, @sophiebits, @unstubbable, @lubieowoce)\n\nSupport Server Actions (#26124, #26632, #27459 by @sebmarkbage and @acdlite)\n\nChanges to SSR\n\nAdd external runtime which bootstraps hydration on the client for binary transparency (#25437, #26169, #25499 by @MofeiZ and @acdlite)\n\nSupport subresource integrity for bootstrapScripts and bootstrapModules (#25104 by @gnoff)\n\nFix null bytes written at text chunk boundaries (#26228 by @sophiebits)\n\nFix logic around attribute serialization (#26526 by @gnoff)\n\nFix precomputed chunk cleared on Node 18 (#25645 by @feedthejim)",
  "Optimize end tag chunks (#27522 by @yujunjung)\n\nGracefully handle suspending in DOM configs (#26768 by @sebmarkbage)\n\nCheck for nullish values on ReactCustomFormAction (#26770 by @sebmarkbage)\n\nPreload bootstrapModules, bootstrapScripts, and update priority queue (#26754, #26753, #27190, #27189 by @gnoff)\n\nClient render the nearest child or parent suspense boundary if replay errors or is aborted (#27386 by @sebmarkbage)\n\nDon't bail out of flushing if we still have pending root tasks (#27385 by @sebmarkbage)\n\nEnsure Resumable State is Serializable (#27388 by @sebmarkbage)\n\nRemove extra render pass when reverting to client render (#26445 by @acdlite)\n\nFix unwinding context during selective hydration (#25876 by @tyao1)",
  "Stop flowing and then abort if a stream is cancelled (#27405 by @sebmarkbage)\n\nPass cancellation reason to abort (#27536 by @sebmarkbage)\n\nAdd onHeaders entrypoint option (#27641, #27712 by @gnoff)\n\nEscape <style> and <script> textContent to enable rendering inner content without dangerouslySetInnerHTML (#28870, #28871 by @gnoff)\n\nFallback to client replaying actions for Blob serialization (#28987 by @sebmarkbage)\n\nRender Suspense fallback if boundary contains new stylesheet during sync update (#28965 by @gnoff)\n\nFix header length tracking (#30327 by @gnoff)\n\nUse srcset to trigger load event on mount (#30351 by @gnoff)\n\nDon't perform work when closing stream (#30497 by @gnoff)\n\nAllow aborting during render (#30488, #30730 by @gnoff)\n\nStart initial work immediately (#31079 by @gnoff)",
  "A transition flowing into a dehydrated boundary no longer suspends when showing fallback (#27230 by @acdlite)\n\nFix selective hydration triggers false update loop error (#27439 by @acdlite)\n\nWarn for Child Iterator of all types but allow Generator Components (#28853 by @sebmarkbage)\n\nInclude regular stack trace in serialized errors (#28684, #28738 by @sebmarkbage)\n\nAborting early no longer infinitely suspends (#24751 by @sebmarkbage)\n\nFix hydration warning suppression in text comparisons (#24784 by @gnoff)\n\nChanges to error handling in SSR\n\nAdd diffs to hydration warnings (#28502, #28512 by @sebmarkbage)\n\nMake Error creation lazy (#24728 by @sebmarkbage)\n\nRemove recoverable error when a sync update flows into a dehydrated boundary (#25692 by @sebmarkbage)",
  "Don't \"fix up\" mismatched text content with suppressedHydrationWarning (#26391 by @sebmarkbage)\n\nFix component stacks in errors (#27456 by @sebmarkbage)\n\nAdd component stacks to onError (#27761, #27850 by @gnoff and @sebmarkbage)\n\nThrow hydration mismatch errors once (#28502 by @sebmarkbage)\n\nAdd Bun streaming server renderer (#25597 by @colinhacks)\n\nAdd nonce support to bootstrap scripts (#26738 by @danieltott)\n\nAdd crossorigin support to bootstrap scripts (#26844 by @HenriqueLimas)\n\nSupport nonce and fetchpriority in preload links (#26826 by @liuyenwei)\n\nAdd referrerPolicy to ReactDOM.preload() (#27096 by @styfle)\n\nAdd server condition for react/jsx-dev-runtime (#28921 by @himself65)\n\nExport version (#29596 by @unstubbable)",
  "Export version (#29596 by @unstubbable)\n\nRename the secret export of Client and Server internals (#28786, #28789 by @sebmarkbage)\n\nRemove layout effect warning on server (#26395 by @rickhanlonii)\n\nRemove errorInfo.digest from onRecoverableError (#28222 by @gnoff)\n\nReactTestRenderer\n\nAdd deprecation error to react-test-renderer on web (#27903, #28904 by @jackpope and @acdlite)\n\nRender with ConcurrentRoot on web (#28498 by @jackpope)\n\nRemove react-test-renderer/shallow export (#25475, #28497 by @sebmarkbage and @jackpope)\n\nReact Reconciler\n\nEnable suspending commits without blocking render (#26398, #26427 by @acdlite)\n\nRemove prepareUpdate (#26583, #27409 by @sebmarkbage and @sophiebits)\n\nReact-Is\n\nEnable tree shaking (#27701 by @markerikson)",
  "Enable tree shaking (#27701 by @markerikson)\n\nRemove isConcurrentMode and isAsyncMode methods (#28224 by @gaearon)\n\nuseSyncExternalStore\n\nRemove React internals access (#29868 by @phryneas)\n\nFix stale selectors keeping previous store references (#25969 by @jellevoost)\n\n18.3.1 (April 26, 2024)\n\nExport act from react f1338f\n\n18.3.0 (April 25, 2024)\n\nThis release is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.\n\nRead the React 19 Upgrade Guide for more info.\n\nReact\n\nAllow writing to this.refs to support string ref codemod 909071\n\nWarn for deprecated findDOMNode outside StrictMode c3b283\n\nWarn for deprecated test-utils methods d4ea75\n\nWarn for deprecated Legacy Context outside StrictMode 415ee0",
  "Warn for deprecated string refs outside StrictMode #25383\n\nWarn for deprecated defaultProps for function components #25699\n\nWarn when spreading key #25697\n\nWarn when using act from test-utils d4ea75\n\nReact DOM\n\nWarn for deprecated unmountComponentAtNode 8a015b\n\nWarn for deprecated renderToStaticNodeStream #28874\n\n18.2.0 (June 14, 2022)\n\nReact DOM\n\nProvide a component stack as a second argument to onRecoverableError. (@gnoff in #24591)\n\nFix hydrating into document causing a blank page on mismatch. (@gnoff in #24523)\n\nFix false positive hydration errors with Suspense. (@gnoff in #24480 and @acdlite in #24532)\n\nFix ignored setState in Safari when adding an iframe. (@gaearon in #24459)\n\nReact DOM Server",
  "React DOM Server\n\nPass information about server errors to the client. (@salazarm and @gnoff in #24551 and #24591)\n\nAllow to provide a reason when aborting the HTML stream. (@gnoff in #24680)\n\nEliminate extraneous text separators in the HTML where possible. (@gnoff in #24630)\n\nDisallow complex children inside <title> elements to match the browser constraints. (@gnoff in #24679)\n\nFix buffering in some worker environments by explicitly setting highWaterMark to 0. (@jplhomer in #24641)\n\nServer Components (Experimental)\n\nAdd support for useId() inside Server Components. (@gnoff in #24172)\n\n18.1.0 (April 26, 2022)\n\nReact DOM\n\nFix the false positive warning about react-dom/client when using UMD bundle. (@alireza-molaee in #24274)",
  "Fix suppressHydrationWarning to work in production too. (@gaearon in #24271)\n\nFix componentWillUnmount firing twice inside of Suspense. (@acdlite in #24308)\n\nFix some transition updates being ignored. (@acdlite in #24353)\n\nFix useDeferredValue causing an infinite loop when passed an unmemoized value. (@acdlite in #24247)\n\nFix throttling of revealing Suspense fallbacks. (@sunderls in #24253)\n\nFix an inconsistency in whether the props object is the same between renders. (@Andarist and @acdlite in #24421)\n\nFix a missing warning about a setState loop in useEffect. (@gaearon in #24298)\n\nFix a spurious hydration error. (@gnoff in #24404)\n\nWarn when calling setState in useInsertionEffect. (@gaearon in #24295)\n\nEnsure the reason for hydration errors is always displayed. (@gaearon in #24276)",
  "React DOM Server\n\nFix escaping for the bootstrapScriptContent contents. (@gnoff in #24385)\n\nSignificantly improve performance of renderToPipeableStream. (@gnoff in #24291)\n\nESLint Plugin: React Hooks\n\nFix false positive errors with a large number of branches. (@scyron6 in #24287)\n\nDon't consider a known dependency stable when the variable is reassigned. (@afzalsayed96 in #24343)\n\nUse Subscription\n\nReplace the implementation with the use-sync-external-store shim. (@gaearon in #24289)\n\n18.0.0 (March 29, 2022)\n\nBelow is a list of all new features, APIs, deprecations, and breaking changes. Read React 18 release post and React 18 upgrade guide for more information.\n\nNew Features\n\nReact",
  "New Features\n\nReact\n\nuseId is a new hook for generating unique IDs on both the client and server, while avoiding hydration mismatches. It is primarily useful for component libraries integrating with accessibility APIs that require unique IDs. This solves an issue that already exists in React 17 and below, but it’s even more important in React 18 because of how the new streaming server renderer delivers HTML out-of-order.\n\nstartTransition and useTransition let you mark some state updates as not urgent. Other state updates are considered urgent by default. React will allow urgent state updates (for example, updating a text input) to interrupt non-urgent state updates (for example, rendering a list of search results).",
  "useDeferredValue lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn't block user input.\n\nuseSyncExternalStore is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for useEffect when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React.",
  "useInsertionEffect is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout.\n\nReact DOM Client\n\nThese new APIs are now exported from react-dom/client:\n\ncreateRoot: New method to create a root to render or unmount. Use it instead of ReactDOM.render. New features in React 18 don't work without it.",
  "hydrateRoot: New method to hydrate a server rendered application. Use it instead of ReactDOM.hydrate in conjunction with the new React DOM Server APIs. New features in React 18 don't work without it.\n\nBoth createRoot and hydrateRoot accept a new option called onRecoverableError in case you want to be notified when React recovers from errors during rendering or hydration for logging. By default, React will use reportError, or console.error in the older browsers.\n\nReact DOM Server\n\nThese new APIs are now exported from react-dom/server and have full support for streaming Suspense on the server:\n\nrenderToPipeableStream: for streaming in Node environments.\n\nrenderToReadableStream: for modern edge runtime environments, such as Deno and Cloudflare workers.",
  "The existing renderToString method keeps working but is discouraged.\n\nDeprecations\n\nreact-dom: ReactDOM.render has been deprecated. Using it will warn and run your app in React 17 mode.\n\nreact-dom: ReactDOM.hydrate has been deprecated. Using it will warn and run your app in React 17 mode.\n\nreact-dom: ReactDOM.unmountComponentAtNode has been deprecated.\n\nreact-dom: ReactDOM.renderSubtreeIntoContainer has been deprecated.\n\nreact-dom/server: ReactDOMServer.renderToNodeStream has been deprecated.\n\nBreaking Changes\n\nReact",
  "Breaking Changes\n\nReact\n\nAutomatic batching: This release introduces a performance improvement that changes to the way React batches updates to do more batching automatically. See Automatic batching for fewer renders in React 18 for more info. In the rare case that you need to opt out, wrap the state update in flushSync.",
  "Stricter Strict Mode: In the future, React will provide a feature that lets components preserve state between unmounts. To prepare for it, React 18 introduces a new development-only check to Strict Mode. React will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount. If this breaks your app, consider removing Strict Mode until you can fix the components to be resilient to remounting with existing state.\n\nConsistent useEffect timing: React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn't always predictable or consistent.",
  "Stricter hydration errors: Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to \"patch up\" individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest <Suspense> boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.",
  "Suspense trees are always consistent: If a component suspends before it's fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.\n\nLayout Effects with Suspense: When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.",
  "New JS Environment Requirements: React now depends on modern browsers features including Promise, Symbol, and Object.assign. If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.\n\nScheduler (Experimental)\n\nRemove unstable scheduler/tracing API\n\nNotable Changes\n\nReact\n\nComponents can now render undefined: React no longer throws if you return undefined from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a return statement before JSX.",
  "In tests, act warnings are now opt-in: If you're running end-to-end tests, the act warnings are unnecessary. We've introduced an opt-in mechanism so you can enable them only for unit tests where they are useful and beneficial.\n\nNo warning about setState on unmounted components: Previously, React warned about memory leaks when you call setState on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We've removed this warning.",
  "No suppression of console logs: When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we've suppressed console logs for one of the two renders to make the logs easier to read. In response to community feedback about this being confusing, we've removed the suppression. Instead, if you have React DevTools installed, the second log's renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.\n\nImproved memory usage: React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.\n\nReact DOM Server",
  "React DOM Server\n\nrenderToString: Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest <Suspense> boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like renderToPipeableStream or renderToReadableStream instead.\n\nrenderToStaticMarkup: Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest <Suspense> boundary and retry rendering on the client.\n\nAll Changes\n\nReact",
  "All Changes\n\nReact\n\nAdd useTransition and useDeferredValue to separate urgent updates from transitions. (#10426, #10715, #15593, #15272, #15578, #15769, #17058, #18796, #19121, #19703, #19719, #19724, #20672, #20976 by @acdlite, @lunaruan, @rickhanlonii, and @sebmarkbage)\n\nAdd useId for generating unique IDs. (#17322, #18576, #22644, #22672, #21260 by @acdlite, @lunaruan, and @sebmarkbage)\n\nAdd useSyncExternalStore to help external store libraries integrate with React. (#15022, #18000, #18771, #22211, #22292, #22239, #22347, #23150 by @acdlite, @bvaughn, and @drarmstr)\n\nAdd startTransition as a version of useTransition without pending feedback. (#19696 by @rickhanlonii)\n\nAdd useInsertionEffect for CSS-in-JS libraries. (#21913 by @rickhanlonii)",
  "Make Suspense remount layout effects when content reappears. (#19322, #19374, #19523, #20625, #21079 by @acdlite, @bvaughn, and @lunaruan)\n\nMake <StrictMode> re-run effects to check for restorable state. (#19523 , #21418 by @bvaughn and @lunaruan)\n\nAssume Symbols are always available. (#23348 by @sebmarkbage)\n\nRemove object-assign polyfill. (#23351 by @sebmarkbage)\n\nRemove unsupported unstable_changedBits API. (#20953 by @acdlite)\n\nAllow components to render undefined. (#21869 by @rickhanlonii)\n\nFlush useEffect resulting from discrete events like clicks synchronously. (#21150 by @acdlite)\n\nSuspense fallback={undefined} now behaves the same as null and isn't ignored. (#21854 by @rickhanlonii)\n\nConsider all lazy() resolving to the same component equivalent. (#20357 by @sebmarkbage)",
  "Don't patch console during first render. (#22308 by @lunaruan)\n\nImprove memory usage. (#21039 by @bgirard)\n\nImprove messages if string coercion throws (Temporal.*, Symbol, etc.) (#22064 by @justingrant)\n\nUse setImmediate when available over MessageChannel. (#20834 by @gaearon)\n\nFix context failing to propagate inside suspended trees. (#23095 by @gaearon)\n\nFix useReducer observing incorrect props by removing the eager bailout mechanism. (#22445 by @josephsavona)\n\nFix setState being ignored in Safari when appending iframes. (#23111 by @gaearon)\n\nFix a crash when rendering ZonedDateTime in the tree. (#20617 by @dimaqq)\n\nFix a crash when document is set to null in tests. (#22695 by @SimenB)\n\nFix onLoad not triggering when concurrent features are on. (#23316 by @gnoff)",
  "Fix a warning when a selector returns NaN. (#23333 by @hachibeeDI)\n\nFix the generated license header. (#23004 by @vitaliemiron)\n\nAdd package.json as one of the entry points. (#22954 by @Jack)\n\nAllow suspending outside a Suspense boundary. (#23267 by @acdlite)\n\nLog a recoverable error whenever hydration fails. (#23319 by @acdlite)\n\nReact DOM\n\nAdd createRoot and hydrateRoot. (#10239, #11225, #12117, #13732, #15502, #15532, #17035, #17165, #20669, #20748, #20888, #21072, #21417, #21652, #21687, #23207, #23385 by @acdlite, @bvaughn, @gaearon, @lunaruan, @rickhanlonii, @trueadm, and @sebmarkbage)\n\nAdd selective hydration. (#14717, #14884, #16725, #16880, #17004, #22416, #22629, #22448, #22856, #23176 by @acdlite, @gaearon, @salazarm, and @sebmarkbage)",
  "Add aria-description to the list of known ARIA attributes. (#22142 by @mahyareb)\n\nAdd onResize event to video elements. (#21973 by @rileyjshaw)\n\nAdd imageSizes and imageSrcSet to known props. (#22550 by @eps1lon)\n\nAllow non-string <option> children if value is provided. (#21431 by @sebmarkbage)\n\nFix aspectRatio style not being applied. (#21100 by @gaearon)\n\nWarn if renderSubtreeIntoContainer is called. (#23355 by @acdlite)\n\nReact DOM Server\n\nAdd the new streaming renderer. (#14144, #20970, #21056, #21255, #21200, #21257, #21276, #22443, #22450, #23247, #24025, #24030 by @sebmarkbage)\n\nFix context providers in SSR when handling multiple requests. (#23171 by @frandiox)\n\nRevert to client render on text mismatch. (#23354 by @acdlite)\n\nDeprecate renderToNodeStream. (#23359 by @sebmarkbage)",
  "Fix a spurious error log in the new server renderer. (#24043 by @eps1lon)\n\nFix a bug in the new server renderer. (#22617 by @shuding)\n\nIgnore function and symbol values inside custom elements on the server. (#21157 by @sebmarkbage)\n\nReact DOM Test Utils\n\nThrow when act is used in production. (#21686 by @acdlite)\n\nSupport disabling spurious act warnings with global.IS_REACT_ACT_ENVIRONMENT. (#22561 by @acdlite)\n\nExpand act warning to cover all APIs that might schedule React work. (#22607 by @acdlite)\n\nMake act batch updates. (#21797 by @acdlite)\n\nRemove warning for dangling passive effects. (#22609 by @acdlite)\n\nReact Refresh\n\nTrack late-mounted roots in Fast Refresh. (#22740 by @anc95)\n\nAdd exports field to package.json. (#23087 by @otakustay)\n\nServer Components (Experimental)",
  "Server Components (Experimental)\n\nAdd Server Context support. (#23244 by @salazarm)\n\nAdd lazy support. (#24068 by @gnoff)\n\nUpdate webpack plugin for webpack 5 (#22739 by @michenly)\n\nFix a mistake in the Node loader. (#22537 by @btea)\n\nUse globalThis instead of window for edge environments. (#22777 by @huozhi)\n\nScheduler (Experimental)\n\nRemove unstable scheduler/tracing API (#20037 by @bvaughn)\n\n17.0.2 (March 22, 2021)\n\nReact DOM\n\nRemove an unused dependency to address the SharedArrayBuffer cross-origin isolation warning. (@koba04 and @bvaughn in #20831, #20832, and #20840)\n\n17.0.1 (October 22, 2020)\n\nReact DOM\n\nFix a crash in IE11. (@gaearon in #20071)\n\n17.0.0 (October 20, 2020)\n\nToday, we are releasing React 17!",
  "Today, we are releasing React 17!\n\nLearn more about React 17 and how to update to it on the official React blog.\n\nReact\n\nAdd react/jsx-runtime and react/jsx-dev-runtime for the new JSX transform. (@lunaruan in #18299)\n\nBuild component stacks from native error frames. (@sebmarkbage in #18561)\n\nAllow to specify displayName on context for improved stacks. (@eps1lon in #18224)\n\nPrevent 'use strict' from leaking in the UMD bundles. (@koba04 in #19614)\n\nStop using fb.me for redirects. (@cylim in #19598)\n\nReact DOM\n\nDelegate events to roots instead of document. (@trueadm in #18195 and others)\n\nClean up all effects before running any next effects. (@bvaughn in #17947)\n\nRun useEffect cleanup functions asynchronously. (@bvaughn in #17925)",
  "Use browser focusin and focusout for onFocus and onBlur. (@trueadm in #19186)\n\nMake all Capture events use the browser capture phase. (@trueadm in #19221)\n\nDon't emulate bubbling of the onScroll event. (@gaearon in #19464)\n\nThrow if forwardRef or memo component returns undefined. (@gaearon in #19550)\n\nRemove event pooling. (@trueadm in #18969)\n\nStop exposing internals that won’t be needed by React Native Web. (@necolas in #18483)\n\nAttach all known event listeners when the root mounts. (@gaearon in #19659)\n\nDisable console in the second render pass of DEV mode double render. (@sebmarkbage in #18547)\n\nDeprecate the undocumented and misleading ReactTestUtils.SimulateNative API. (@gaearon in #13407)\n\nRename private field names used in the internals. (@gaearon in #18377)",
  "Don't call User Timing API in development. (@gaearon in #18417)\n\nDisable console during the repeated render in Strict Mode. (@sebmarkbage in #18547)\n\nIn Strict Mode, double-render components without Hooks too. (@eps1lon in #18430)\n\nAllow calling ReactDOM.flushSync during lifecycle methods (but warn). (@sebmarkbage in #18759)\n\nAdd the code property to the keyboard event objects. (@bl00mber in #18287)\n\nAdd the disableRemotePlayback property for video elements. (@tombrowndev in #18619)\n\nAdd the enterKeyHint property for input elements. (@eps1lon in #18634)\n\nWarn when no value is provided to <Context.Provider>. (@charlie1404 in #19054)\n\nWarn when memo or forwardRef components return undefined. (@bvaughn in #19550)\n\nImprove the error message for invalid updates. (@JoviDeCroock in #18316)",
  "Exclude forwardRef and memo from stack frames. (@sebmarkbage in #18559)\n\nImprove the error message when switching between controlled and uncontrolled inputs. (@vcarl in #17070)\n\nKeep onTouchStart, onTouchMove, and onWheel passive. (@gaearon in #19654)\n\nFix setState hanging in development inside a closed iframe. (@gaearon in #19220)\n\nFix rendering bailout for lazy components with defaultProps. (@jddxf in #18539)\n\nFix a false positive warning when dangerouslySetInnerHTML is undefined. (@eps1lon in #18676)\n\nFix Test Utils with non-standard require implementation. (@just-boris in #18632)\n\nFix onBeforeInput reporting an incorrect event.type. (@eps1lon in #19561)\n\nFix event.relatedTarget reported as undefined in Firefox. (@claytercek in #19607)",
  "Fix \"unspecified error\" in IE11. (@hemakshis in #19664)\n\nFix rendering into a shadow root. (@Jack-Works in #15894)\n\nFix movementX/Y polyfill with capture events. (@gaearon in #19672)\n\nUse delegation for onSubmit and onReset events. (@gaearon in #19333)\n\nImprove memory usage. (@trueadm in #18970)\n\nReact DOM Server\n\nMake useCallback behavior consistent with useMemo for the server renderer. (@alexmckenley in #18783)\n\nFix state leaking when a function component throws. (@pmaccart in #19212)\n\nReact Test Renderer\n\nImprove findByType error message. (@henryqdineen in #17439)\n\nConcurrent Mode (Experimental)\n\nRevamp the priority batching heuristics. (@acdlite in #18796)\n\nAdd the unstable_ prefix before the experimental APIs. (@acdlite in #18825)",
  "Remove unstable_discreteUpdates and unstable_flushDiscreteUpdates. (@trueadm in #18825)\n\nRemove the timeoutMs argument. (@acdlite in #19703)\n\nDisable <div hidden /> prerendering in favor of a different future API. (@acdlite in #18917)\n\nAdd unstable_expectedLoadTime to Suspense for CPU-bound trees. (@acdlite in #19936)\n\nAdd an experimental unstable_useOpaqueIdentifier Hook. (@lunaruan in #17322)\n\nAdd an experimental unstable_startTransition API. (@rickhanlonii in #19696)\n\nUsing act in the test renderer no longer flushes Suspense fallbacks. (@acdlite in #18596)\n\nUse global render timeout for CPU Suspense. (@sebmarkbage in #19643)\n\nClear the existing root content before mounting. (@bvaughn in #18730)\n\nFix a bug with error boundaries. (@acdlite in #18265)",
  "Fix a bug causing dropped updates in a suspended tree. (@acdlite in #18384 and #18457)\n\nFix a bug causing dropped render phase updates. (@acdlite in #18537)\n\nFix a bug in SuspenseList. (@sebmarkbage in #18412)\n\nFix a bug causing Suspense fallback to show too early. (@acdlite in #18411)\n\nFix a bug with class components inside SuspenseList. (@sebmarkbage in #18448)\n\nFix a bug with inputs that may cause updates to be dropped. (@jddxf in #18515 and @acdlite in #18535)\n\nFix a bug causing Suspense fallback to get stuck. (@acdlite in #18663)\n\nDon't cut off the tail of a SuspenseList if hydrating. (@sebmarkbage in #18854)\n\nFix a bug in useMutableSource that may happen when getSnapshot changes. (@bvaughn in #18297)\n\nFix a tearing bug in useMutableSource. (@bvaughn in #18912)",
  "Warn if calling setState outside of render but before commit. (@sebmarkbage in #18838)\n\n16.14.0 (October 14, 2020)\n\nReact\n\nAdd support for the new JSX transform. (@lunaruan in #18299)\n\n16.13.1 (March 19, 2020)\n\nReact DOM\n\nFix bug in legacy mode Suspense where effect clean-up functions are not fired. This only affects users who use Suspense for data fetching in legacy mode, which is not technically supported. (@acdlite in #18238)\n\nRevert warning for cross-component updates that happen inside class render lifecycles (componentWillReceiveProps, shouldComponentUpdate, and so on). (@gaearon in #18330)\n\n16.13.0 (February 26, 2020)\n\nReact\n\nWarn when a string ref is used in a manner that's not amenable to a future codemod (@lunaruan in #17864)",
  "Deprecate React.createFactory() (@trueadm in #17878)\n\nReact DOM\n\nWarn when changes in style may cause an unexpected collision (@sophiebits in #14181, #18002)\n\nWarn when a function component is updated during another component's render phase (@acdlite in #17099)\n\nDeprecate unstable_createPortal (@trueadm in #17880)\n\nFix onMouseEnter being fired on disabled buttons (@AlfredoGJ in #17675)\n\nCall shouldComponentUpdate twice when developing in StrictMode (@bvaughn in #17942)\n\nAdd version property to ReactDOM (@ealush in #15780)\n\nDon't call toString() of dangerouslySetInnerHTML (@sebmarkbage in #17773)\n\nShow component stacks in more warnings (@gaearon in #17922, #17586)\n\nConcurrent Mode (Experimental)\n\nWarn for problematic usages of ReactDOM.createRoot() (@trueadm in #17937)",
  "Remove ReactDOM.createRoot() callback params and added warnings on usage (@bvaughn in #17916)\n\nDon't group Idle/Offscreen work with other work (@sebmarkbage in #17456)\n\nAdjust SuspenseList CPU bound heuristic (@sebmarkbage in #17455)\n\nAdd missing event plugin priorities (@trueadm in #17914)\n\nFix isPending only being true when transitioning from inside an input event (@acdlite in #17382)\n\nFix React.memo components dropping updates when interrupted by a higher priority update (@acdlite in #18091)\n\nDon't warn when suspending at the wrong priority (@gaearon in #17971)\n\nFix a bug with rebasing updates (@acdlite and @sebmarkbage in #17560, #17510, #17483, #17480)\n\n16.12.0 (November 14, 2019)\n\nReact DOM\n\nFix passive effects (useEffect) not being fired in a multi-root app. (@acdlite in #17347)",
  "React Is\n\nFix lazy and memo types considered elements instead of components (@bvaughn in #17278)\n\n16.11.0 (October 22, 2019)\n\nReact DOM\n\nFix mouseenter handlers from firing twice inside nested React containers. @yuanoook in #16928\n\nRemove unstable_createRoot and unstable_createSyncRoot experimental APIs. (These are available in the Experimental channel as createRoot and createSyncRoot.) (@acdlite in #17088)\n\n16.10.2 (October 3, 2019)\n\nReact DOM\n\nFix regression in react-native-web by restoring order of arguments in event plugin extractors (@necolas in #16978)\n\n16.10.1 (September 28, 2019)\n\nReact DOM\n\nFix regression in Next.js apps by allowing Suspense mismatch during hydration to silently proceed (@sebmarkbage in #16943)\n\n16.10.0 (September 27, 2019)\n\nReact DOM",
  "16.10.0 (September 27, 2019)\n\nReact DOM\n\nFix edge case where a hook update wasn't being memoized. (@sebmarkbage in #16359)\n\nFix heuristic for determining when to hydrate, so we don't incorrectly hydrate during an update. (@sebmarkbage in #16739)\n\nClear additional fiber fields during unmount to save memory. (@trueadm in #16807)\n\nFix bug with required text fields in Firefox. (@halvves in #16578)\n\nPrefer Object.is instead of inline polyfill, when available. (@ku8ar in #16212)\n\nFix bug when mixing Suspense and error handling. (@acdlite in #16801)\n\nScheduler (Experimental)\n\nImprove queue performance by switching its internal data structure to a min binary heap. (@acdlite in #16245)",
  "Use postMessage loop with short intervals instead of attempting to align to frame boundaries with requestAnimationFrame. (@acdlite in #16214)\n\nuseSubscription\n\nAvoid tearing issue when a mutation happens and the previous update is still in progress. (@bvaughn in #16623)\n\n16.9.0 (August 8, 2019)\n\nReact\n\nAdd <React.Profiler> API for gathering performance measurements programmatically. (@bvaughn in #15172)\n\nRemove unstable_ConcurrentMode in favor of unstable_createRoot. (@acdlite in #15532)\n\nReact DOM\n\nDeprecate old names for the UNSAFE_* lifecycle methods. (@bvaughn in #15186 and @threepointone in #16103)\n\nDeprecate javascript: URLs as a common attack surface. (@sebmarkbage in #15047)\n\nDeprecate uncommon \"module pattern\" (factory) components. (@sebmarkbage in #15145)",
  "Add support for the disablePictureInPicture attribute on <video>. (@eek in #15334)\n\nAdd support for onLoad event for <embed>. (@cherniavskii in #15614)\n\nAdd support for editing useState state from DevTools. (@bvaughn in #14906)\n\nAdd support for toggling Suspense from DevTools. (@gaearon in #15232)\n\nWarn when setState is called from useEffect, creating a loop. (@gaearon in #15180)\n\nFix a memory leak. (@paulshen in #16115)\n\nFix a crash inside findDOMNode for components wrapped in <Suspense>. (@acdlite in #15312)\n\nFix pending effects from being flushed too late. (@acdlite in #15650)\n\nFix incorrect argument order in a warning message. (@brickspert in #15345)\n\nFix hiding Suspense fallback nodes when there is an !important style. (@acdlite in #15861 and #15882)",
  "Slightly improve hydration performance. (@bmeurer in #15998)\n\nReact DOM Server\n\nFix incorrect output for camelCase custom CSS property names. (@bedakb in #16167)\n\nReact Test Utilities and Test Renderer\n\nAdd act(async () => ...) for testing asynchronous state updates. (@threepointone in #14853)\n\nAdd support for nesting act from different renderers. (@threepointone in #16039 and #16042)\n\nWarn in Strict Mode if effects are scheduled outside an act() call. (@threepointone in #15763 and #16041)\n\nWarn when using act from the wrong renderer. (@threepointone in #15756)\n\nESLint Plugin: React Hooks\n\nReport Hook calls at the top level as a violation. (gaearon in #16455)\n\n16.8.6 (March 27, 2019)\n\nReact DOM\n\nFix an incorrect bailout in useReducer(). (@acdlite in #15124)",
  "Fix iframe warnings in Safari DevTools. (@renanvalentin in #15099)\n\nWarn if contextType is set to Context.Consumer instead of Context. (@aweary in #14831)\n\nWarn if contextType is set to invalid values. (@gaearon in #15142)\n\n16.8.5 (March 22, 2019)\n\nReact DOM\n\nDon't set the first option as selected in select tag with size attribute. (@kulek1 in #14242)\n\nImprove the useEffect(async () => ...) warning message. (@gaearon in #15118)\n\nImprove the error message sometimes caused by duplicate React. (@jaredpalmer in #15139)\n\nReact DOM Server\n\nImprove the useLayoutEffect warning message when server rendering. (@gaearon in #15158)\n\nReact Shallow Renderer\n\nFix setState in shallow renderer to work with Hooks. (@gaearon in #15120)\n\nFix shallow renderer to support React.memo. (@aweary in #14816)",
  "Fix shallow renderer to support Hooks inside forwardRef. (@eps1lon in #15100)\n\n16.8.4 (March 5, 2019)\n\nReact DOM and other renderers\n\nFix a bug where DevTools caused a runtime error when inspecting a component that used a useContext hook. (@bvaughn in #14940)\n\n16.8.3 (February 21, 2019)\n\nReact DOM\n\nFix a bug that caused inputs to behave incorrectly in UMD builds. (@gaearon in #14914)\n\nFix a bug that caused render phase updates to be discarded. (@gaearon in #14852)\n\nReact DOM Server\n\nUnwind the context stack when a stream is destroyed without completing, to prevent incorrect values during a subsequent render. (@overlookmotel in #14706)\n\nESLint Plugin for React Hooks\n\nAdd a new recommended exhaustive-deps rule. (@gaearon in #14636)\n\n16.8.2 (February 14, 2019)\n\nReact DOM",
  "16.8.2 (February 14, 2019)\n\nReact DOM\n\nFix ReactDOM.render being ignored inside useEffect. (@gaearon in #14799)\n\nFix a crash when unmounting empty portals. (@gaearon in #14820)\n\nFix useImperativeHandle to work correctly when no deps are specified. (@gaearon in #14801)\n\nFix crossOrigin attribute to work in SVG image elements. (@aweary in #14832)\n\nFix a false positive warning when using Suspense with Hooks. (@gaearon in #14821)\n\nReact Test Utils and React Test Renderer\n\nInclude component stack into the act() warning. (@threepointone in #14855)\n\n16.8.1 (February 6, 2019)\n\nReact DOM and React Test Renderer\n\nFix a crash when used together with an older version of React. (@bvaughn in #14770)\n\nReact Test Utils\n\nFix a crash in Node environment. (@threepointone in #14768)",
  "16.8.0 (February 6, 2019)\n\nReact\n\nAdd Hooks — a way to use state and other React features without writing a class. (@acdlite et al. in #13968)\n\nImprove the useReducer Hook lazy initialization API. (@acdlite in #14723)\n\nReact DOM\n\nBail out of rendering on identical values for useState and useReducer Hooks. (@acdlite in #14569)\n\nUse Object.is algorithm for comparing useState and useReducer values. (@Jessidhia in #14752)\n\nDon’t compare the first argument passed to useEffect/useMemo/useCallback Hooks. (@acdlite in #14594)\n\nSupport synchronous thenables passed to React.lazy(). (@gaearon in #14626)\n\nRender components with Hooks twice in Strict Mode (DEV-only) to match class behavior. (@gaearon in #14654)",
  "Warn about mismatching Hook order in development. (@threepointone in #14585 and @acdlite in #14591)\n\nEffect clean-up functions must return either undefined or a function. All other values, including null, are not allowed. @acdlite in #14119\n\nReact Test Renderer and Test Utils\n\nSupport Hooks in the shallow renderer. (@trueadm in #14567)\n\nFix wrong state in shouldComponentUpdate in the presence of getDerivedStateFromProps for Shallow Renderer. (@chenesan in #14613)\n\nAdd ReactTestRenderer.act() and ReactTestUtils.act() for batching updates so that tests more closely match real behavior. (@threepointone in #14744)\n\nESLint Plugin: React Hooks\n\nInitial release. (@calebmer in #13968)\n\nFix reporting after encountering a loop. (@calebmer and @Yurickh in #14661)",
  "Don't consider throwing to be a rule violation. (@sophiebits in #14040)\n\n16.7.0 (December 19, 2018)\n\nReact DOM\n\nFix performance of React.lazy for large numbers of lazily-loaded components. (@acdlite in #14429)\n\nClear fields on unmount to avoid memory leaks. (@trueadm in #14276)\n\nFix bug with SSR and context when mixing react-dom/server@16.6 and react@<16.6. (@gaearon in #14291)\n\nFix a performance regression in profiling mode. (@bvaughn in #14383)\n\nScheduler (Experimental)\n\nPost to MessageChannel instead of window. (@acdlite in #14234)\n\nReduce serialization overhead. (@developit in #14249)\n\nFix fallback to setTimeout in testing environments. (@bvaughn in #14358)\n\nAdd methods for debugging. (@mrkev in #14053)\n\n16.6.3 (November 12, 2018)\n\nReact DOM",
  "16.6.3 (November 12, 2018)\n\nReact DOM\n\nFix bugs in Suspense and lazy. (@acdlite in #14133, #14157, and #14164)\n\nFix highlighting of React.memo updates in React DevTools. (@bvaughn in #14141)\n\nFix interaction of Suspense with the React Profiler. (@bvaughn in #14065)\n\nFix a false positive warning when using Suspense. (@acdlite in #14158)\n\nReact DOM Server\n\nFix incorrect sharing of context state between renderToNodeStream() calls. (@sebmarkbage in #14182)\n\nAdd a warning about incorrect usage of the context API. (@trueadm in #14033)\n\n16.6.2 (November 12, 2018)\n\nThis release was published in a broken state and should be skipped.\n\n16.6.1 (November 6, 2018)\n\nReact DOM\n\nFallback should not remount every time a promise resolves. (@acdlite in #14083)",
  "Fix bug where Suspense keeps showing fallback even after everything finishes loading. (@acdlite in #14083)\n\nFix a crash when Suspense finishes loading in IE11. (@sophiebits in #14126)\n\nFix unresolved default props in lifecycle methods of a lazy component. (@gaearon in #14112)\n\nFix bug when recovering from an error thrown during complete phase. (@gaearon in #14104)\n\nScheduler (Experimental)\n\nSwitch from deadline object to shouldYield API. (@acdlite in #14025)\n\n16.6.0 (October 23, 2018)\n\nReact\n\nAdd React.memo() as an alternative to PureComponent for functions. (@acdlite in #13748)\n\nAdd React.lazy() for code splitting components. (@acdlite in #13885)\n\nReact.StrictMode now warns about legacy context API. (@bvaughn in #13760)",
  "React.StrictMode now warns about findDOMNode. (@sebmarkbage in #13841)\n\nRename unstable_AsyncMode to unstable_ConcurrentMode. (@trueadm in #13732)\n\nRename unstable_Placeholder to Suspense, and delayMs to maxDuration. (@gaearon in #13799 and @sebmarkbage in #13922)\n\nReact DOM\n\nAdd contextType as a more ergonomic way to subscribe to context from a class. (@bvaughn in #13728)\n\nAdd getDerivedStateFromError lifecycle method for catching errors in a future asynchronous server-side renderer. (@bvaughn in #13746)\n\nWarn when <Context> is used instead of <Context.Consumer>. (@trueadm in #13829)\n\nFix gray overlay on iOS Safari. (@philipp-spiess in #13778)\n\nFix a bug caused by overwriting window.event in development. (@sergei-startsev in #13697)\n\nReact DOM Server",
  "React DOM Server\n\nAdd support for React.memo(). (@alexmckenley in #13855)\n\nAdd support for contextType. (@alexmckenley and @sebmarkbage in #13889)\n\nScheduler (Experimental)\n\nRename the package to scheduler. (@gaearon in #13683)\n\nSupport priority levels, continuations, and wrapped callbacks. (@acdlite in #13720 and #13842)\n\nImprove the fallback mechanism in non-DOM environments. (@acdlite in #13740)\n\nSchedule requestAnimationFrame earlier. (@acdlite in #13785)\n\nFix the DOM detection to be more thorough. (@trueadm in #13731)\n\nFix bugs with interaction tracing. (@bvaughn in #13590)\n\nAdd the envify transform to the package. (@mridgway in #13766)\n\n16.5.2 (September 18, 2018)\n\nReact DOM\n\nFixed a recent <iframe> regression (@JSteunou in #13650)",
  "Fix updateWrapper so that <textarea>s no longer re-render when data is unchanged (@joelbarbosa in #13643)\n\nSchedule (Experimental)\n\nRenaming \"tracking\" API to \"tracing\" (@bvaughn in #13641)\n\nAdd UMD production+profiling entry points (@bvaughn in #13642)\n\nRefactored schedule to remove some React-isms and improve performance for when deferred updates time out (@acdlite in #13582)\n\n16.5.1 (September 13, 2018)\n\nReact\n\nImprove the warning when React.forwardRef receives an unexpected number of arguments. (@andresroberto in #13636)\n\nReact DOM\n\nFix a regression in unstable exports used by React Native Web. (@aweary in #13598)\n\nFix a crash when component defines a method called isReactComponent. (@gaearon in #13608)",
  "Fix a crash in development mode in IE9 when printing a warning. (@link-alex in #13620)\n\nProvide a better error message when running react-dom/profiling with schedule/tracking. (@bvaughn in #13605)\n\nIf a ForwardRef component defines a displayName, use it in warnings. (@probablyup in #13615)\n\nSchedule (Experimental)\n\nAdd a separate profiling entry point at schedule/tracking-profiling. (@bvaughn in #13605)\n\n16.5.0 (September 5, 2018)\n\nReact\n\nAdd a warning if React.forwardRef render function doesn't take exactly two arguments (@bvaughn in #13168)\n\nImprove the error message when passing an element to createElement by mistake (@DCtheTall in #13131)\n\nDon't call profiler onRender until after mutations (@bvaughn in #13572)\n\nReact DOM\n\nAdd support for React DevTools Profiler (@bvaughn in #13058)",
  "Add react-dom/profiling entry point alias for profiling in production (@bvaughn in #13570)\n\nAdd onAuxClick event for browsers that support it (@jquense in #11571)\n\nAdd movementX and movementY fields to mouse events (@jasonwilliams in #9018)\n\nAdd tangentialPressure and twist fields to pointer events (@motiz88 in #13374)\n\nMinimally support iframes (nested browsing contexts) in selection event handling (@acusti in #12037)\n\nSupport passing booleans to the focusable SVG attribute (@gaearon in #13339)\n\nIgnore <noscript> on the client when hydrating (@Ephem in #13537)\n\nFix gridArea to be treated as a unitless CSS property (@mgol in #13550)\n\nFix incorrect data in compositionend event when typing Korean on IE11 (@crux153 in #12563)",
  "Fix a crash when using dynamic children in the <option> tag (@Slowyn in #13261, @gaearon in #13465)\n\nFix the checked attribute not getting initially set on the input (@dilidili in #13114)\n\nFix hydration of dangerouslySetInnerHTML when __html is not a string (@gaearon in #13353)\n\nFix a warning about missing controlled onChange to fire on falsy values too (@nicolevy in #12628)\n\nFix submit and reset buttons getting an empty label (@ellsclytn in #12780)\n\nFix the onSelect event not being triggered after drag and drop (@gaearon in #13422)\n\nFix the onClick event not working inside a portal on iOS (@aweary in #11927)\n\nFix a performance issue when thousands of roots are re-rendered (@gaearon in #13335)",
  "Fix a performance regression that also caused onChange to not fire in some cases (@gaearon in #13423)\n\nHandle errors in more edge cases gracefully (@gaearon in #13237 and @acdlite in #13269)\n\nDon't use proxies for synthetic events in development (@gaearon in #12171)\n\nWarn when \"false\" or \"true\" is the value of a boolean DOM prop (@motiz88 in #13372)\n\nWarn when this.state is initialized to props (@veekas in #11658)\n\nDon't compare style on hydration in IE due to noisy false positives (@mgol in #13534)\n\nInclude StrictMode in the component stack (@gaearon in #13240)\n\nDon't overwrite window.event in IE (@ConradIrwin in #11696)\n\nImprove component stack for the folder/index.js naming convention (@gaearon in #12059)",
  "Improve a warning when using getDerivedStateFromProps without initialized state (@flxwu in #13317)\n\nImprove a warning about invalid textarea usage (@raunofreiberg in #13361)\n\nTreat invalid Symbol and function values more consistently (@raunofreiberg in #13362 and #13389)\n\nAllow Electron <webview> tag without warnings (@philipp-spiess in #13301)\n\nDon't show the uncaught error addendum if e.preventDefault() was called (@gaearon in #13384)\n\nWarn about rendering Generators (@gaearon in #13312)\n\nRemove irrelevant suggestion of a legacy method from a warning (@zx6658 in #13169)\n\nRemove unstable_deferredUpdates in favor of unstable_scheduleWork from schedule (@gaearon in #13488)\n\nFix unstable asynchronous mode from doing unnecessary work when an update takes too long (@acdlite in #13503)",
  "React DOM Server\n\nFix crash with nullish children when using dangerouslySetInnerHtml in a selected <option> (@mridgway in #13078)\n\nFix crash when setTimeout is missing (@dustinsoftware in #13088)\n\nReact Test Renderer and Test Utils\n\nFix this in a functional component for shallow renderer to be undefined (@koba04 in #13144)\n\nDeprecate a Jest-specific ReactTestUtils.mockComponent() helper (@bvaughn in #13193)\n\nWarn about ReactDOM.createPortal usage within the test renderer (@bvaughn in #12895)\n\nImprove a confusing error message (@gaearon in #13351)\n\nReact ART\n\nAdd support for DevTools (@yunchancho in #13173)\n\nSchedule (Experimental)",
  "Schedule (Experimental)\n\nNew package for cooperatively scheduling work in a browser environment. It's used by React internally, but its public API is not finalized yet. (@flarnie in #12624)\n\n16.4.2 (August 1, 2018)\n\nReact DOM Server\n\nFix a potential XSS vulnerability when the attacker controls an attribute name (CVE-2018-6341). This fix is available in the latest react-dom@16.4.2, as well as in previous affected minor versions: react-dom@16.0.1, react-dom@16.1.2, react-dom@16.2.1, and react-dom@16.3.3. (@gaearon in #13302)\n\nFix a crash in the server renderer when an attribute is called hasOwnProperty. This fix is only available in react-dom@16.4.2. (@gaearon in #13303)\n\n16.4.1 (June 13, 2018)\n\nReact",
  "16.4.1 (June 13, 2018)\n\nReact\n\nYou can now assign propTypes to components returned by React.ForwardRef. (@bvaughn in #12911)\n\nReact DOM\n\nFix a crash when the input type changes from some other types to text. (@spirosikmd in #12135)\n\nFix a crash in IE11 when restoring focus to an SVG element. (@ThaddeusJiang in #12996)\n\nFix a range input not updating in some cases. (@Illu in #12939)\n\nFix input validation triggering unnecessarily in Firefox. (@nhunzaker in #12925)\n\nFix an incorrect event.target value for the onChange event in IE9. (@nhunzaker in #12976)\n\nFix a false positive error when returning an empty <React.Fragment /> from a component. (@philipp-spiess in #12966)\n\nReact DOM Server",
  "React DOM Server\n\nFix an incorrect value being provided by new context API. (@ericsoderberghp in #12985, @gaearon in #13019)\n\nReact Test Renderer\n\nAllow multiple root children in test renderer traversal API. (@gaearon in #13017)\n\nFix getDerivedStateFromProps() in the shallow renderer to not discard the pending state. (@fatfisz in #13030)\n\n16.4.0 (May 23, 2018)\n\nReact\n\nAdd a new experimental React.unstable_Profiler component for measuring performance. (@bvaughn in #12745)\n\nReact DOM\n\nAdd support for the Pointer Events specification. (@philipp-spiess in #12507)\n\nProperly call getDerivedStateFromProps() regardless of the reason for re-rendering. (@acdlite in #12600 and #12802)\n\nFix a bug that prevented context propagation in some cases. (@gaearon in #12708)",
  "Fix re-rendering of components using forwardRef() on a deeper setState(). (@gaearon in #12690)\n\nFix some attributes incorrectly getting removed from custom element nodes. (@airamrguez in #12702)\n\nFix context providers to not bail out on children if there's a legacy context provider above. (@gaearon in #12586)\n\nAdd the ability to specify propTypes on a context provider component. (@nicolevy in #12658)\n\nFix a false positive warning when using react-lifecycles-compat in <StrictMode>. (@bvaughn in #12644)\n\nWarn when the forwardRef() render function has propTypes or defaultProps. (@bvaughn in #12644)\n\nImprove how forwardRef() and context consumers are displayed in the component stack. (@sophiebits in #12777)",
  "Change internal event names. This can break third-party packages that rely on React internals in unsupported ways. (@philipp-spiess in #12629)\n\nReact Test Renderer\n\nFix the getDerivedStateFromProps() support to match the new React DOM behavior. (@koba04 in #12676)\n\nFix a testInstance.parent crash when the parent is a fragment or another special node. (@gaearon in #12813)\n\nforwardRef() components are now discoverable by the test renderer traversal methods. (@gaearon in #12725)\n\nShallow renderer now ignores setState() updaters that return null or undefined. (@koba04 in #12756)\n\nReact ART\n\nFix reading context provided from the tree managed by React DOM. (@acdlite in #12779)\n\nReact Call Return (Experimental)",
  "React Call Return (Experimental)\n\nThis experiment was deleted because it was affecting the bundle size and the API wasn't good enough. It's likely to come back in the future in some other form. (@gaearon in #12820)\n\nReact Reconciler (Experimental)\n\nThe new host config shape is flat and doesn't use nested objects. (@gaearon in #12792)\n\n16.3.3 (August 1, 2018)\n\nReact DOM Server\n\nFix a potential XSS vulnerability when the attacker controls an attribute name (CVE-2018-6341). This fix is available in the latest react-dom@16.4.2, as well as in previous affected minor versions: react-dom@16.0.1, react-dom@16.1.2, react-dom@16.2.1, and react-dom@16.3.3. (@gaearon in #13302)\n\n16.3.2 (April 16, 2018)\n\nReact",
  "16.3.2 (April 16, 2018)\n\nReact\n\nImprove the error message when passing null or undefined to React.cloneElement. (@nicolevy in #12534)\n\nReact DOM\n\nFix an IE crash in development when using <StrictMode>. (@bvaughn in #12546)\n\nFix labels in User Timing measurements for new component types. (@bvaughn in #12609)\n\nImprove the warning about wrong component type casing. (@nicolevy in #12533)\n\nImprove general performance in development mode. (@gaearon in #12537)\n\nImprove performance of the experimental unstable_observedBits API with nesting. (@gaearon in #12543)\n\nReact Test Renderer\n\nAdd a UMD build. (@bvaughn in #12594)\n\n16.3.1 (April 3, 2018)\n\nReact\n\nFix a false positive warning in IE11 when using Fragment. (@heikkilamarko in #12504)\n\nPrefix a private API. (@Andarist in #12501)",
  "Prefix a private API. (@Andarist in #12501)\n\nImprove the warning when calling setState() in constructor. (@gaearon in #12532)\n\nReact DOM\n\nFix getDerivedStateFromProps() not getting applied in some cases. (@acdlite in #12528)\n\nFix a performance regression in development mode. (@gaearon in #12510)\n\nFix error handling bugs in development mode. (@gaearon and @acdlite in #12508)\n\nImprove user timing API messages for profiling. (@flarnie in #12384)\n\nCreate Subscription\n\nSet the package version to be in sync with React releases. (@bvaughn in #12526)\n\nAdd a peer dependency on React 16.3+. (@NMinhNguyen in #12496)\n\n16.3.0 (March 29, 2018)\n\nReact\n\nAdd a new officially supported context API. (@acdlite in #11818)",
  "Add a new React.createRef() API as an ergonomic alternative to callback refs. (@trueadm in #12162)\n\nAdd a new React.forwardRef() API to let components forward their refs to a child. (@bvaughn in #12346)\n\nFix a false positive warning in IE11 when using React.Fragment. (@XaveScor in #11823)\n\nReplace React.unstable_AsyncComponent with React.unstable_AsyncMode. (@acdlite in #12117)\n\nImprove the error message when calling setState() on an unmounted component. (@sophiebits in #12347)\n\nReact DOM\n\nAdd a new getDerivedStateFromProps() lifecycle and UNSAFE_ aliases for the legacy lifecycles. (@bvaughn in #12028)\n\nAdd a new getSnapshotBeforeUpdate() lifecycle. (@bvaughn in #12404)\n\nAdd a new <React.StrictMode> wrapper to help prepare apps for async rendering. (@bvaughn in #12083)",
  "Add support for onLoad and onError events on the <link> tag. (@roderickhsiao in #11825)\n\nAdd support for noModule boolean attribute on the <script> tag. (@aweary in #11900)\n\nFix minor DOM input bugs in IE and Safari. (@nhunzaker in #11534)\n\nCorrectly detect Ctrl + Enter in onKeyPress in more browsers. (@nstraub in #10514)\n\nFix containing elements getting focused on SSR markup mismatch. (@koba04 in #11737)\n\nFix value and defaultValue to ignore Symbol values. (@nhunzaker in #11741)\n\nFix refs to class components not getting cleaned up when the attribute is removed. (@bvaughn in #12178)\n\nFix an IE/Edge issue when rendering inputs into a different window. (@M-ZubairAhmed in #11870)\n\nThrow with a meaningful message if the component runs after jsdom has been destroyed. (@gaearon in #11677)",
  "Don't crash if there is a global variable called opera with a null value. @alisherdavronov in #11854)\n\nDon't check for old versions of Opera. (@skiritsis in #11921)\n\nDeduplicate warning messages about <option selected>. (@watadarkstar in #11821)\n\nDeduplicate warning messages about invalid callback. (@yenshih in #11833)\n\nDeprecate ReactDOM.unstable_createPortal() in favor of ReactDOM.createPortal(). (@prometheansacrifice in #11747)\n\nDon't emit User Timing entries for context types. (@abhaynikam in #12250)\n\nImprove the error message when context consumer child isn't a function. (@raunofreiberg in #12267)\n\nImprove the error message when adding a ref to a functional component. (@skiritsis in #11782)\n\nReact DOM Server",
  "React DOM Server\n\nPrevent an infinite loop when attempting to render portals with SSR. (@gaearon in #11709)\n\nWarn if a class doesn't extend React.Component. (@wyze in #11993)\n\nFix an issue with this.state of different components getting mixed up. (@sophiebits in #12323)\n\nProvide a better message when component type is undefined. (@HeroProtagonist in #11966)\n\nReact Test Renderer\n\nFix handling of fragments in toTree(). (@maciej-ka in #12107 and @gaearon in #12154)\n\nShallow renderer should assign state to null for components that don't set it. (@jwbay in #11965)\n\nShallow renderer should filter legacy context according to contextTypes. (@koba04 in #11922)\n\nAdd an unstable API for testing asynchronous rendering. (@acdlite in #12478)\n\nReact Is (New)",
  "React Is (New)\n\nFirst release of the new package that libraries can use to detect different React node types. (@bvaughn in #12199)\n\nAdd ReactIs.isValidElementType() to help higher-order components validate their inputs. (@jamesreggio in #12483)\n\nReact Lifecycles Compat (New)\n\nFirst release of the new package to help library developers target multiple versions of React. (@bvaughn in #12105)\n\nCreate Subscription (New)\n\nFirst release of the new package to subscribe to external data sources safely for async rendering. (@bvaughn in #12325)\n\nReact Reconciler (Experimental)\n\nExpose react-reconciler/persistent for building renderers that use persistent data structures. (@gaearon in #12156)\n\nPass host context to finalizeInitialChildren(). (@jquense in #11970)",
  "Remove useSyncScheduling from the host config. (@acdlite in #11771)\n\nReact Call Return (Experimental)\n\nFix a crash on updates. (@rmhartog in #11955)\n\n16.2.1 (August 1, 2018)\n\nReact DOM Server\n\nFix a potential XSS vulnerability when the attacker controls an attribute name (CVE-2018-6341). This fix is available in the latest react-dom@16.4.2, as well as in previous affected minor versions: react-dom@16.0.1, react-dom@16.1.2, react-dom@16.2.1, and react-dom@16.3.3. (@gaearon in #13302)\n\n16.2.0 (November 28, 2017)\n\nReact\n\nAdd Fragment as named export to React. (@clemmy in #10783)\n\nSupport experimental Call/Return types in React.Children utilities. (@MatteoVH in #11422)\n\nReact DOM\n\nFix radio buttons not getting checked when using multiple lists of radios. (@landvibe in #11227)",
  "Fix radio buttons not receiving the onChange event in some cases. (@jquense in #11028)\n\nReact Test Renderer\n\nFix setState() callback firing too early when called from componentWillMount. (@accordeiro in #11507)\n\nReact Reconciler\n\nExpose react-reconciler/reflection with utilities useful to custom renderers. (@rivenhk in #11683)\n\nInternal Changes\n\nMany tests were rewritten against the public API. Big thanks to everyone who contributed!\n\n16.1.2 (August 1, 2018)\n\nReact DOM Server\n\nFix a potential XSS vulnerability when the attacker controls an attribute name (CVE-2018-6341). This fix is available in the latest react-dom@16.4.2, as well as in previous affected minor versions: react-dom@16.0.1, react-dom@16.1.2, react-dom@16.2.1, and react-dom@16.3.3. (@gaearon in #13302)",
  "16.1.1 (November 13, 2017)\n\nReact\n\nImprove the warning about undefined component type. (@selbekk in #11505)\n\nReact DOM\n\nSupport string values for the capture attribute. (@maxschmeling in #11424)\n\nReact DOM Server\n\nDon't freeze the ReactDOMServer public API. (@travi in #11531)\n\nDon't emit autoFocus={false} attribute on the server. (@gaearon in #11543)\n\nReact Reconciler\n\nChange the hydration API for better Flow typing. (@sebmarkbage in #11493)\n\n16.1.0 (November 9, 2017)\n\nDiscontinuing Bower Releases\n\nStarting with 16.1.0, we will no longer be publishing new releases on Bower. You can continue using Bower for old releases, or point your Bower configs to the React UMD builds hosted on unpkg that mirror npm releases and will continue to be updated.\n\nAll Packages",
  "All Packages\n\nFix an accidental extra global variable in the UMD builds. (@gaearon in #10935)\n\nReact\n\nAdd support for portals in React.Children utilities. (@MatteoVH in #11378)\n\nWarn when a class has a render method but doesn't extend a known base class. (@sw-yx in #11168)\n\nImprove the warning when accidentally returning an object from constructor. (@deanbrophy in #11395)\n\nReact DOM\n\nAllow on as a custom attribute for AMP. (@nuc in #11153)\n\nFix onMouseEnter and onMouseLeave firing on wrong elements. (@gaearon in #11164)\n\nFix null showing up in a warning instead of the component stack. (@gaearon in #10915)\n\nFix IE11 crash in development mode. (@leidegre in #10921)\n\nFix tabIndex not getting applied to SVG elements. (@gaearon in #11034)",
  "Fix SVG children not getting cleaned up on dangerouslySetInnerHTML in IE. (@OriR in #11108)\n\nFix false positive text mismatch warning caused by newline normalization. (@gaearon in #11119)\n\nFix form.reset() to respect defaultValue on uncontrolled <select>. (@aweary in #11057)\n\nFix <textarea> placeholder not rendering on IE11. (@gaearon in #11177)\n\nFix a crash rendering into shadow root. (@gaearon in #11037)\n\nFix false positive warning about hydrating mixed case SVG tags. (@gaearon in #11174)\n\nSuppress the new unknown tag warning for <dialog> element. (@gaearon in #11035)\n\nWarn when defining a non-existent componentDidReceiveProps method. (@iamtommcc in #11479)\n\nWarn about function child no more than once. (@andreysaleba in #11120)",
  "Warn about nested updates no more than once. (@anushreesubramani in #11113)\n\nDeduplicate other warnings about updates. (@anushreesubramani in #11216)\n\nInclude component stack into the warning about contentEditable and children. (@Ethan-Arrowood in #11208)\n\nImprove the warning about booleans passed to event handlers. (@NicBonetto in #11308)\n\nImprove the warning when a multiple select gets null value. (@Hendeca in #11141)\n\nMove link in the warning message to avoid redirect. (@marciovicente in #11400)\n\nAdd a way to suppress the React DevTools installation prompt. (@gaearon in #11448)\n\nRemove unused code. (@gaearon in #10802, #10803)\n\nReact DOM Server\n\nAdd a new suppressHydrationWarning attribute for intentional client/server text mismatches. (@sebmarkbage in #11126)",
  "Fix markup generation when components return strings. (@gaearon in #11109)\n\nFix obscure error message when passing an invalid style value. (@iamdustan in #11173)\n\nInclude the autoFocus attribute into SSR markup. (@gaearon in #11192)\n\nInclude the component stack into more warnings. (@gaearon in #11284)\n\nReact Test Renderer and Test Utils\n\nFix multiple setState() calls in componentWillMount() in shallow renderer. (@Hypnosphi in #11167)\n\nFix shallow renderer to ignore shouldComponentUpdate() after forceUpdate(). (@d4rky-pl in #11239 and #11439)\n\nHandle forceUpdate() and React.PureComponent correctly. (@koba04 in #11440)\n\nAdd back support for running in production mode. (@gaearon in #11112)\n\nAdd a missing package.json dependency. (@gaearon in #11340)\n\nReact ART",
  "React ART\n\nAdd a missing package.json dependency. (@gaearon in #11341)\n\nExpose react-art/Circle, react-art/Rectangle, and react-art/Wedge. (@gaearon in #11343)\n\nReact Reconciler (Experimental)\n\nFirst release of the new experimental package for creating custom renderers. (@iamdustan in #10758)\n\nAdd support for React DevTools. (@gaearon in #11463)\n\nReact Call Return (Experimental)\n\nFirst release of the new experimental package for parent-child communication. (@gaearon in #11364)\n\n16.0.1 (August 1, 2018)\n\nReact DOM Server",
  "16.0.1 (August 1, 2018)\n\nReact DOM Server\n\nFix a potential XSS vulnerability when the attacker controls an attribute name (CVE-2018-6341). This fix is available in the latest react-dom@16.4.2, as well as in previous affected minor versions: react-dom@16.0.1, react-dom@16.1.2, react-dom@16.2.1, and react-dom@16.3.3. (@gaearon in #13302)\n\n16.0.0 (September 26, 2017)\n\nNew JS Environment Requirements\n\nReact 16 depends on the collection types Map and Set, as well as requestAnimationFrame. If you support older browsers and devices which may not yet provide these natively (e.g. <IE11), you may want to include a polyfill.\n\nNew Features\n\nComponents can now return arrays and strings from render. (Docs coming soon!)",
  "Improved error handling with introduction of \"error boundaries\". Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.\n\nFirst-class support for declaratively rendering a subtree into another DOM node with ReactDOM.createPortal(). (Docs coming soon!)\n\nStreaming mode for server side rendering is enabled with ReactDOMServer.renderToNodeStream() and ReactDOMServer.renderToStaticNodeStream(). (@aickin in #10425, #10044, #10039, #10024, #9264, and others.)\n\nReact DOM now allows passing non-standard attributes. (@nhunzaker in #10385, 10564, #10495 and others)\n\nBreaking Changes\n\nThere are several changes to the behavior of scheduling and lifecycle methods:",
  "ReactDOM.render() and ReactDOM.unstable_renderIntoContainer() now return null if called from inside a lifecycle method.\n\nTo work around this, you can either use the new portal API or refs.\n\nMinor changes to setState behavior:\n\nCalling setState with null no longer triggers an update. This allows you to decide in an updater function if you want to re-render.\n\nCalling setState directly in render always causes an update. This was not previously the case. Regardless, you should not be calling setState from render.\n\nsetState callback (second argument) now fires immediately after componentDidMount / componentDidUpdate instead of after all components have rendered.",
  "When replacing <A /> with <B />, B.componentWillMount now always happens before A.componentWillUnmount. Previously, A.componentWillUnmount could fire first in some cases.\n\nPreviously, changing the ref to a component would always detach the ref before that component's render is called. Now, we change the ref later, when applying the changes to the DOM.\n\nIt is not safe to re-render into a container that was modified by something other than React. This worked previously in some cases but was never supported. We now emit a warning in this case. Instead you should clean up your component trees using ReactDOM.unmountComponentAtNode. See this example.\n\ncomponentDidUpdate lifecycle no longer receives prevContext param. (@bvaughn in #8631)",
  "Non-unique keys may now cause children to be duplicated and/or omitted. Using non-unique keys is not (and has never been) supported, but previously it was a hard error.\n\nShallow renderer no longer calls componentDidUpdate() because DOM refs are not available. This also makes it consistent with componentDidMount() (which does not get called in previous versions either).\n\nShallow renderer does not implement unstable_batchedUpdates() anymore.\n\nReactDOM.unstable_batchedUpdates now only takes one extra argument after the callback.\n\nThe names and paths to the single-file browser builds have changed to emphasize the difference between development and production builds. For example:\n\nreact/dist/react.js → react/umd/react.development.js\n\nreact/dist/react.min.js → react/umd/react.production.min.js",
  "react-dom/dist/react-dom.js → react-dom/umd/react-dom.development.js\n\nreact-dom/dist/react-dom.min.js → react-dom/umd/react-dom.production.min.js\n\nThe server renderer has been completely rewritten, with some improvements:\n\nServer rendering does not use markup validation anymore, and instead tries its best to attach to existing DOM, warning about inconsistencies. It also doesn't use comments for empty components and data-reactid attributes on each node anymore.\n\nHydrating a server rendered container now has an explicit API. Use ReactDOM.hydrate instead of ReactDOM.render if you're reviving server rendered HTML. Keep using ReactDOM.render if you're just doing client-side rendering.",
  "When \"unknown\" props are passed to DOM components, for valid values, React will now render them in the DOM. See this post for more details. (@nhunzaker in #10385, 10564, #10495 and others)\n\nErrors in the render and lifecycle methods now unmount the component tree by default. To prevent this, add error boundaries to the appropriate places in the UI.\n\nRemoved Deprecations\n\nThere is no react-with-addons.js build anymore. All compatible addons are published separately on npm, and have single-file browser versions if you need them.",
  "The deprecations introduced in 15.x have been removed from the core package. React.createClass is now available as create-react-class, React.PropTypes as prop-types, React.DOM as react-dom-factories, react-addons-test-utils as react-dom/test-utils, and shallow renderer as react-test-renderer/shallow. See 15.5.0 and 15.6.0 blog posts for instructions on migrating code and automated codemods.\n\n15.7.0 (October 14, 2020)\n\nReact\n\nBackport support for the new JSX transform to 15.x. (@lunaruan in #18299 and @gaearon in #20024)\n\n15.6.2 (September 25, 2017)\n\nAll Packages\n\nSwitch from BSD + Patents to MIT license\n\nReact DOM\n\nFix a bug where modifying document.documentMode would trigger IE detection in other browsers, breaking change events. (@aweary in #10032)",
  "CSS Columns are treated as unitless numbers. (@aweary in #10115)\n\nFix bug in QtWebKit when wrapping synthetic events in proxies. (@walrusfruitcake in #10115)\n\nPrevent event handlers from receiving extra argument in development. (@aweary in #10115)\n\nFix cases where onChange would not fire with defaultChecked on radio inputs. (@jquense in #10156)\n\nAdd support for controlList attribute to allowed DOM properties (@nhunzaker in #9940)\n\nFix a bug where creating an element with a ref in a constructor did not throw an error in development. (@iansu in #10025)\n\n15.6.1 (June 14, 2017)\n\nReact DOM\n\nFix a crash on iOS Safari. (@jquense in #9960)\n\nDon't add px to custom CSS property values. (@TrySound in #9966)\n\n15.6.0 (June 13, 2017)\n\nReact",
  "15.6.0 (June 13, 2017)\n\nReact\n\nDowngrade deprecation warnings to use console.warn instead of console.error. (@flarnie in #9753)\n\nAdd a deprecation warning for React.createClass. Points users to create-react-class instead. (@flarnie in #9771)\n\nAdd deprecation warnings and separate module for React.DOM factory helpers. (@nhunzaker in #8356)\n\nWarn for deprecation of React.createMixin helper, which was never used. (@aweary in #8853)\n\nReact DOM\n\nAdd support for CSS variables in style attribute. (@aweary in #9302)\n\nAdd support for CSS Grid style properties. (@ericsakmar in #9185)\n\nFix bug where inputs mutated value on type conversion. (@nhunzaker in #9806)\n\nFix issues with onChange not firing properly for some inputs. (@jquense in #8575)",
  "Fix bug where controlled number input mistakenly allowed period. (@nhunzaker in #9584)\n\nFix bug where performance entries were being cleared. (@chrisui in #9451)\n\nReact Addons\n\nFix AMD support for addons depending on react. (@flarnie in #9919)\n\nFix isMounted() to return true in componentWillUnmount. (@mridgway in #9638)\n\nFix react-addons-update to not depend on native Object.assign. (@gaearon in #9937)\n\nRemove broken Google Closure Compiler annotation from create-react-class. (@gaearon in #9933)\n\nRemove unnecessary dependency from react-linked-input. (@gaearon in #9766)\n\nPoint react-addons-(css-)transition-group to the new package. (@gaearon in #9937)\n\n15.5.4 (April 11, 2017)\n\nReact Addons\n\nCritical Bugfix: Update the version of prop-types to fix critical bug. (@gaearon in 545c87f)",
  "Fix react-addons-create-fragment package to include loose-envify transform for Browserify users. (@mridgway in #9642)\n\nReact Test Renderer\n\nFix compatibility with Enzyme by exposing batchedUpdates on shallow renderer. (@gaearon in 9382)\n\n15.5.3 (April 7, 2017)\n\nNote: this release has a critical issue and was deprecated. Please update to 15.5.4 or higher.\n\nReact Addons\n\nFix react-addons-create-fragment package to export correct thing. (@gaearon in #9385)\n\nFix create-react-class package to include loose-envify transform for Browserify users. (@mridgway in #9642)\n\n15.5.2 (April 7, 2017)\n\nNote: this release has a critical issue and was deprecated. Please update to 15.5.4 or higher.\n\nReact Addons\n\nFix the production single-file builds to not include the development code. (@gaearon in #9385)",
  "Apply better minification to production single-file builds. (@gaearon in #9385)\n\nAdd missing and remove unnecessary dependencies to packages. (@gaearon in #9385)\n\n15.5.1 (April 7, 2017)\n\nNote: this release has a critical issue and was deprecated. Please update to 15.5.4 or higher.\n\nReact\n\nFix erroneous PropTypes access warning. (@acdlite in (ec97ebb)\n\n15.5.0 (April 7, 2017)\n\nNote: this release has a critical issue and was deprecated. Please update to 15.5.4 or higher.\n\nReact\n\nAdded a deprecation warning for React.createClass. Points users to create-react-class instead. (@acdlite in #d9a4fa4)\n\nAdded a deprecation warning for React.PropTypes. Points users to prop-types instead. (@acdlite in #043845c)\n\nFixed an issue when using ReactDOM together with ReactDOMServer. (@wacii in #9005)",
  "Fixed issue with Closure Compiler. (@anmonteiro in #8895)\n\nAnother fix for Closure Compiler. (@Shastel in #8882)\n\nAdded component stack info to invalid element type warning. (@n3tr in #8495)\n\nReact DOM\n\nFixed Chrome bug when backspacing in number inputs. (@nhunzaker in #7359)\n\nAdded react-dom/test-utils, which exports the React Test Utils. (@bvaughn)\n\nReact Test Renderer\n\nFixed bug where componentWillUnmount was not called for children. (@gre in #8512)\n\nAdded react-test-renderer/shallow, which exports the shallow renderer. (@bvaughn)\n\nReact Addons\n\nLast release for addons; they will no longer be actively maintained.\n\nRemoved peerDependencies so that addons continue to work indefinitely. (@acdlite and @bvaughn in 8a06cd7 and 67a8db3)",
  "Updated to remove references to React.createClass and React.PropTypes (@acdlite in 12a96b9)\n\nreact-addons-test-utils is deprecated. Use react-dom/test-utils and react-test-renderer/shallow instead. (@bvaughn)\n\n15.4.2 (January 6, 2017)\n\nReact\n\nFixed build issues with the Brunch bundler. (@gaearon in #8686)\n\nImproved error messages for invalid element types. (@sophiebits in #8612)\n\nRemoved a warning about getInitialState when this.state is set. (@bvaughn in #8594)\n\nRemoved some dead code. (@diegomura in #8050, @dfrownfelter in #8597)\n\nReact DOM\n\nFixed a decimal point issue on uncontrolled number inputs. (@nhunzaker in #7750)\n\nFixed rendering of textarea placeholder in IE11. (@aweary in #8020)\n\nWorked around a script engine bug in IE9. (@eoin in #8018)\n\nReact Addons",
  "React Addons\n\nFixed build issues in RequireJS and SystemJS environments. (@gaearon in #8686)\n\nAdded missing package dependencies. (@kweiberth in #8467)\n\n15.4.1 (November 22, 2016)\n\nReact\n\nRestructure variable assignment to work around a Rollup bug (@gaearon in #8384)\n\nReact DOM\n\nFixed event handling on disabled button elements (@sophiebits in #8387)\n\nFixed compatibility of browser build with AMD environments (@zpao in #8374)\n\n15.4.0 (November 16, 2016)\n\nReact\n\nReact package and browser build no longer \"secretly\" includes React DOM. (@sebmarkbage in #7164 and #7168)\n\nRequired PropTypes now fail with specific messages for null and undefined. (@chenglou in #7291)\n\nImproved development performance by freezing children instead of copying. (@keyanzhang in #7455)\n\nReact DOM",
  "React DOM\n\nFixed occasional test failures when React DOM is used together with shallow renderer. (@goatslacker in #8097)\n\nAdded a warning for invalid aria- attributes. (@jessebeach in #7744)\n\nAdded a warning for using autofocus rather than autoFocus. (@hkal in #7694)\n\nRemoved an unnecessary warning about polyfilling String.prototype.split. (@nhunzaker in #7629)\n\nClarified the warning about not calling PropTypes manually. (@jedwards1211 in #7777)\n\nThe unstable batchedUpdates API now passes the wrapped function's return value through. (@bgnorlov in #7444)\n\nFixed a bug with updating text in IE 8. (@mnpenner in #7832)\n\nReact Perf\n\nWhen ReactPerf is started, you can now view the relative time spent in components as a chart in Chrome Timeline. (@gaearon in #7549)\n\nReact Test Utils",
  "React Test Utils\n\nIf you call Simulate.click() on a <input disabled onClick={foo} /> then foo will get called whereas it didn't before. (@nhunzaker in #7642)\n\nReact Test Renderer\n\nDue to packaging changes, it no longer crashes when imported together with React DOM in the same file. (@sebmarkbage in #7164 and #7168)\n\nReactTestRenderer.create() now accepts {createNodeMock: element => mock} as an optional argument so you can mock refs with snapshot testing. (@Aweary in #7649, #8261)\n\n15.3.2 (September 19, 2016)\n\nReact\n\nRemove plain object warning from React.createElement & React.cloneElement. (@spudly in #7724)\n\nReact DOM\n\nAdd playsInline to supported HTML attributes. (@reaperhulk in #7519)\n\nAdd as to supported HTML attributes. (@kevinslin in #7582)",
  "Improve DOM nesting validation warning about whitespace. (@sophiebits in #7515)\n\nAvoid \"Member not found\" exception in IE10 when calling preventDefault() in Synthetic Events. (@g-palmer in #7411)\n\nFix memory leak in onSelect implementation. (@AgtLucas in #7533)\n\nImprove robustness of document.documentMode checks to handle Google Tag Manager. (@SchleyB in #7594)\n\nAdd more cases to controlled inputs warning. (@marcin-mazurek in #7544)\n\nHandle case of popup blockers overriding document.createEvent. (@Andarist in #7621)\n\nFix issue with dangerouslySetInnerHTML and SVG in Internet Explorer. (@zpao in #7618)\n\nImprove handling of Japanese IME on Internet Explorer. (@msmania in #7107)\n\nReact Test Renderer\n\nSupport error boundaries. (@millermedeiros in #7558, #7569, #7619)",
  "Skip null ref warning. (@Aweary in #7658)\n\nReact Perf Add-on\n\nEnsure lifecycle timers are stopped on errors. (@gaearon in #7548)\n\n15.3.1 (August 19, 2016)\n\nReact\n\nImprove performance of development builds in various ways. (@gaearon in #7461, #7463, #7483, #7488, #7491, #7510)\n\nCleanup internal hooks to improve performance of development builds. (@gaearon in #7464, #7472, #7481, #7496)\n\nUpgrade fbjs to pick up another performance improvement from @gaearon for development builds. (@zpao in #7532)\n\nImprove startup time of React in Node. (@zertosh in #7493)\n\nImprove error message of React.Children.only. (@sophiebits in #7514)\n\nReact DOM\n\nAvoid <input> validation warning from browsers when changing type. (@nhunzaker in #7333)",
  "Avoid \"Member not found\" exception in IE10 when calling stopPropagation() in Synthetic Events. (@nhunzaker in #7343)\n\nFix issue resulting in inability to update some <input> elements in mobile browsers. (@keyanzhang in #7397)\n\nFix memory leak in server rendering. (@keyanzhang in #7410)\n\nFix issue resulting in <input type=\"range\"> values not updating when changing min or max. (@troydemonbreun in #7486)\n\nAdd new warning for rare case of attempting to unmount a container owned by a different copy of React. (@ventuno in #7456)\n\nReact Test Renderer\n\nFix ReactTestInstance::toJSON() with empty top-level components. (@Morhaus in #7523)\n\nReact Native Renderer\n\nChange trackedTouchCount invariant into a console.error for better reliability. (@yungsters in #7400)\n\n15.3.0 (July 29, 2016)\n\nReact",
  "15.3.0 (July 29, 2016)\n\nReact\n\nAdd React.PureComponent - a new base class to extend, replacing react-addons-pure-render-mixin now that mixins don't work with ES2015 classes. (@sophiebits in #7195)\n\nAdd new warning when modifying this.props.children. (@jimfb in #7001)\n\nFixed issue with ref resolution order. (@gaearon in #7101)\n\nWarn when mixin is undefined. (@swaroopsm in #6158)\n\nDowngrade \"unexpected batch number\" invariant to a warning. (@sophiebits in #7133)\n\nValidate arguments to oneOf and oneOfType PropTypes sooner. (@troydemonbreun in #6316)\n\nWarn when calling PropTypes directly. (@Aweary in #7132, #7194)\n\nImprove warning when using Maps as children. (@keyanzhang in #7260)\n\nAdd additional type information to the PropTypes.element warning. (@alexzherdev in #7319)",
  "Improve component identification in no-op setState warning. (@keyanzhang in #7326)\n\nReact DOM\n\nFix issue with nested server rendering. (@Aweary in #7033)\n\nAdd xmlns, xmlnsXlink to supported SVG attributes. (@salzhrani in #6471)\n\nAdd referrerPolicy to supported HTML attributes. (@Aweary in #7274)\n\nFix issue resulting in <input type=\"range\"> initial value being rounded. (@troydemonbreun in #7251)\n\nReact Test Renderer\n\nInitial public release of package allowing more focused testing. Install with npm install react-test-renderer. (@sophiebits in #6944, #7258, @iamdustan in #7362)\n\nReact Perf Add-on\n\nFix issue resulting in excessive warnings when encountering an internal measurement error. (@sassanh in #7299)\n\nReact TestUtils Add-on",
  "React TestUtils Add-on\n\nImplement type property on for events created via TestUtils.Simulate.*. (@yaycmyk in #6154)\n\nFix crash when running TestUtils with the production build of React. (@gaearon in #7246)\n\n15.2.1 (July 8, 2016)\n\nReact\n\nFix errant warning about missing React element. (@gaearon in #7193)\n\nBetter removal of dev-only code, leading to a small reduction in the minified production bundle size. (@gaearon in #7188, #7189)\n\nReact DOM\n\nAdd stack trace to null input value warning. (@jimfb in #7040)\n\nFix webcomponents example. (@jalexanderfox in #7057)\n\nFix unstable_renderSubtreeIntoContainer so that context properly updates when linked to state. (@gaearon in #7125)\n\nImprove invariant wording for void elements. (@starkch in #7066)",
  "Ensure no errors are thrown due to event handlers in server rendering. (@rricard in #7127)\n\nFix regression resulting in value-less submit and reset inputs removing the browser-default text. (@zpao in #7197)\n\nFix regression resulting in empty name attribute being added to inputs when not provided. (@okonet in #7199)\n\nFix issue with nested server rendering. (@Aweary in #7033)\n\nReact Perf Add-on\n\nMake ReactPerf.start() work properly during lifecycle methods. (@gaearon in #7208).\n\nReact CSSTransitionGroup Add-on\n\nFix issue resulting in spurious unknown property warnings. (@batusai513 in #7165)\n\nReact Native Renderer\n\nImprove error handling in cross-platform touch event handling. (@yungsters in #7143)\n\n15.2.0 (July 1, 2016)\n\nReact",
  "15.2.0 (July 1, 2016)\n\nReact\n\nAdd error codes to production invariants, with links to the view the full error text. (@keyanzhang in #6948)\n\nInclude component stack information in PropType validation warnings. (@troydemonbreun in #6398, @sophiebits in #6771)\n\nInclude component stack information in key warnings. (@keyanzhang in #6799)\n\nStop validating props at mount time, only validate at element creation. (@keyanzhang in #6824)\n\nNew invariant providing actionable error in missing instance case. (@yungsters in #6990)\n\nAdd React.PropTypes.symbol to support ES2015 Symbols as props. (@puradox in #6377)\n\nFix incorrect coercion of ref or key that are undefined in development (@gaearon in #6880)\n\nFix a false positive when passing other element’s props to cloneElement (@ericmatthys in #6268)",
  "Warn if you attempt to define childContextTypes on a functional component (@Aweary in #6933)\n\nReact DOM\n\nAdd warning for unknown properties on DOM elements. (@jimfb in #6800, @gm758 in #7152)\n\nProperly remove attributes from custom elements. (@grassator in #6748)\n\nFix invalid unicode escape in attribute name regular expression. (@nbjahan in #6772)\n\nAdd onLoad handling to <link> element. (@roderickhsiao in #6815)\n\nAdd onError handling to <source> element. (@wadahiro in #6941)\n\nHandle value and defaultValue more accurately in the DOM. (@jimfb in #6406)\n\nFix events issue in environments with mutated Object.prototype. (@Weizenlol in #6886)\n\nFix issue where is=\"null\" ended up in the DOM in Firefox. (@darobin in #6896)",
  "Improved performance of text escaping by using escape-html. (@aickin in #6862)\n\nFix issue with dangerouslySetInnerHTML and SVG in Internet Explorer. (@joshhunt in #6982)\n\nFix issue with <textarea> placeholders. (@jimfb in #7002)\n\nFix controlled vs uncontrolled detection of <input type=\"radio\"/>. (@jimfb in #7003)\n\nImprove performance of updating text content. (@trueadm in #7005)\n\nEnsure controlled <select> components behave the same on initial render as they do on updates. (@yiminghe in #5362)\n\nReact Perf Add-on\n\nAdd isRunning() API. (@nfcampos in #6763)\n\nImprove accuracy of lifecycle hook timing. (@gaearon in #6858)\n\nFix internal errors when using ReactPerf with portal components. (@gaearon in #6860)\n\nFix performance regression. (@sophiebits in #6770)",
  "Add warning that ReactPerf is not enabled in production. (@sashashakun in #6884)\n\nReact CSSTransitionGroup Add-on\n\nFix timing issue with null node. (@keyanzhang in #6958)\n\nReact Native Renderer\n\nDependencies on React Native modules use CommonJS requires instead of providesModule. (@davidaurelio in #6715)\n\n15.1.0 (May 20, 2016)\n\nReact\n\nEnsure we're using the latest object-assign, which has protection against a non-spec-compliant native Object.assign. (@zpao in #6681)\n\nAdd a new warning to communicate that props objects passed to createElement must be plain objects. (@richardscarrott in #6134)\n\nFix a batching bug resulting in some lifecycle methods incorrectly being called multiple times. (@sophiebits in #6650)\n\nReact DOM\n\nFix regression in custom elements support. (@jscissr in #6570)",
  "Stop incorrectly warning about using onScroll event handler with server rendering. (@Aweary in #6678)\n\nFix grammar in the controlled input warning. (@jakeboone02 in #6657)\n\nFix issue preventing <object> nodes from being able to read <param> nodes in IE. (@syranide in #6691)\n\nFix issue resulting in crash when using experimental error boundaries with server rendering. (@jimfb in #6694)\n\nAdd additional information to the controlled input warning. (@borisyankov in #6341)\n\nReact Perf Add-on\n\nCompletely rewritten to collect data more accurately and to be easier to maintain. (@gaearon in #6647, #6046)\n\nReact Native Renderer\n\nRemove some special cases for platform specific branching. (@sebmarkbage in #6660)\n\nRemove use of merge utility. (@sebmarkbage in #6634)",
  "Renamed some modules to better indicate usage (@javache in #6643)\n\n15.0.2 (April 29, 2016)\n\nReact\n\nRemoved extraneous files from npm package. (@gaearon in #6388)\n\nEnsure componentWillUnmount is only called once. (@jimfb in #6613)\n\nReactDOM\n\nFixed bug resulting in disabled buttons responding to mouse events in IE. (@nhunzaker in #6215)\n\nEnsure <option>s are correctly selected when inside <optgroup>. (@trevorsmith in #6442)\n\nRestore support for rendering into a shadow root. (@Wildhoney in #6462)\n\nEnsure nested <body> elements are caught when warning for invalid markup. (@keyanzhang in #6469)\n\nImprove warning when encountering multiple elements with the same key. (@hkal in #6500)\n\nReact TestUtils Add-on\n\nEnsure that functional components do not have an owner. (@gaearon in #6362)",
  "Handle invalid arguments to scryRenderedDOMComponentsWithClass better. (@ipeters90 in #6529)\n\nReact Perf Add-on\n\nIgnore DOM operations that occur outside the batch operation. (@gaearon in #6516)\n\nReact Native Renderer\n\nThese files are now shipped inside the React npm package. They have no impact on React core or ReactDOM.\n\n15.0.1 (April 8, 2016)\n\nReact\n\nRestore React.__spread API to unbreak code compiled with some tools making use of this undocumented API. It is now officially deprecated. (@zpao in #6444)\n\nReactDOM\n\nFixed issue resulting in loss of cursor position in controlled inputs. (@sophiebits in #6449)\n\n15.0.0 (April 7, 2016)\n\nMajor changes",
  "15.0.0 (April 7, 2016)\n\nMajor changes\n\nInitial render now uses document.createElement instead of generating HTML. Previously we would generate a large string of HTML and then set node.innerHTML. At the time, this was decided to be faster than using document.createElement for the majority of cases and browsers that we supported. Browsers have continued to improve and so overwhelmingly this is no longer true. By using createElement we can make other parts of React faster. (@sophiebits in #5205)",
  "data-reactid is no longer on every node. As a result of using document.createElement, we can prime the node cache as we create DOM nodes, allowing us to skip a potential lookup (which used the data-reactid attribute). Root nodes will have a data-reactroot attribute and server generated markup will still contain data-reactid. (@sophiebits in #5205)\n\nNo more extra <span>s. ReactDOM will now render plain text nodes interspersed with comment nodes that are used for demarcation. This gives us the same ability to update individual pieces of text, without creating extra nested nodes. If you were targeting these <span>s in your CSS, you will need to adjust accordingly. You can always render them explicitly in your components. (@mwiencek in #5753)",
  "Rendering null now uses comment nodes. Previously null would render to <noscript> elements. We now use comment nodes. This may cause issues if making use of :nth-child CSS selectors. While we consider this rendering behavior an implementation detail of React, it's worth noting the potential problem. (@sophiebits in #5451)",
  "Functional components can now return null. We added support for defining stateless components as functions in React 0.14. However, React 0.14 still allowed you to define a class component without extending React.Component or using React.createClass(), so we couldn’t reliably tell if your component is a function or a class, and did not allow returning null from it. This issue is solved in React 15, and you can now return null from any component, whether it is a class or a function. (@jimfb in #5884)",
  "Improved SVG support. All SVG tags are now fully supported. (Uncommon SVG tags are not present on the React.DOM element helper, but JSX and React.createElement work on all tag names.) All SVG attributes that are implemented by the browsers should be supported too. If you find any attributes that we have missed, please let us know in this issue. (@zpao in #6243)\n\nBreaking changes\n\nNo more extra <span>s.",
  "Breaking changes\n\nNo more extra <span>s.\n\nReact.cloneElement() now resolves defaultProps. We fixed a bug in React.cloneElement() that some components may rely on. If some of the props received by cloneElement() are undefined, it used to return an element with undefined values for those props. We’re changing it to be consistent with createElement(). Now any undefined props passed to cloneElement() are resolved to the corresponding component’s defaultProps. (@truongduy134 in #5997)",
  "ReactPerf.getLastMeasurements() is opaque. This change won’t affect applications but may break some third-party tools. We are revamping ReactPerf implementation and plan to release it during the 15.x cycle. The internal performance measurement format is subject to change so, for the time being, we consider the return value of ReactPerf.getLastMeasurements() an opaque data structure that should not be relied upon. (@gaearon in #6286)\n\nRemoved deprecations\n\nThese deprecations were introduced nine months ago in v0.14 with a warning and are removed:\n\nDeprecated APIs are removed from the React top-level export: findDOMNode, render, renderToString, renderToStaticMarkup, and unmountComponentAtNode. As a reminder, they are now available on ReactDOM and ReactDOMServer. (@jimfb in #5832)",
  "Deprecated addons are removed: batchedUpdates and cloneWithProps. (@jimfb in #5859, @zpao in #6016)\n\nDeprecated component instance methods are removed: setProps, replaceProps, and getDOMNode. (@jimfb in #5570)\n\nDeprecated CommonJS react/addons entry point is removed. As a reminder, you should use separate react-addons-* packages instead. This only applies if you use the CommonJS builds. (@gaearon in #6285)\n\nPassing children to void elements like <input> was deprecated, and now throws an error. (@jonhester in #3372)\n\nReact-specific properties on DOM refs (e.g. this.refs.div.props) were deprecated, and are removed now. (@jimfb in #5495)\n\nNew deprecations, introduced with a warning",
  "New deprecations, introduced with a warning\n\nEach of these changes will continue to work as before with a new warning until the release of React 16 so you can upgrade your code gradually.\n\nLinkedStateMixin and valueLink are now deprecated due to very low popularity. If you need this, you can use a wrapper component that implements the same behavior: react-linked-input. (@jimfb in #6127)\n\nFuture versions of React will treat <input value={null}> as a request to clear the input. However, React 0.14 has been ignoring value={null}. React 15 warns you on a null input value and offers you to clarify your intention. To fix the warning, you may explicitly pass an empty string to clear a controlled input, or pass undefined to make the input uncontrolled. (@antoaravinth in #5048)",
  "ReactPerf.printDOM() was renamed to ReactPerf.printOperations(), and ReactPerf.getMeasurementsSummaryMap() was renamed to ReactPerf.getWasted(). (@gaearon in #6287)\n\nNew helpful warnings\n\nIf you use a minified copy of the development build, React DOM kindly encourages you to use the faster production build instead. (@sophiebits in #5083)\n\nReact DOM: When specifying a unit-less CSS value as a string, a future version will not add px automatically. This version now warns in this case (ex: writing style={{width: '300'}}. Unitless number values like width: 300 are unchanged. (@pluma in #5140)",
  "Synthetic Events will now warn when setting and accessing properties (which will not get cleared appropriately), as well as warn on access after an event has been returned to the pool. (@kentcdodds in #5940 and @koba04 in #5947)\n\nElements will now warn when attempting to read ref and key from the props. (@prometheansacrifice in #5744)\n\nReact will now warn if you pass a different props object to super() in the constructor. (@prometheansacrifice in #5346)\n\nReact will now warn if you call setState() inside getChildContext(). (@raineroviir in #6121)\n\nReact DOM now attempts to warn for mistyped event handlers on DOM elements, such as onclick which should be onClick. (@ali in #5361)\n\nReact DOM now warns about NaN values in style. (@jontewks in #5811)",
  "React DOM now warns if you specify both value and defaultValue for an input. (@mgmcdermott in #5823)\n\nReact DOM now warns if an input switches between being controlled and uncontrolled. (@TheBlasfem in #5864)\n\nReact DOM now warns if you specify onFocusIn or onFocusOut handlers as they are unnecessary in React. (@jontewks in #6296)\n\nReact now prints a descriptive error message when you pass an invalid callback as the last argument to ReactDOM.render(), this.setState(), or this.forceUpdate(). (@conorhastings in #5193 and @gaearon in #6310)\n\nAdd-Ons: TestUtils.Simulate() now prints a helpful message if you attempt to use it with shallow rendering. (@conorhastings in #5358)\n\nPropTypes: arrayOf() and objectOf() provide better error messages for invalid arguments. (@chicoxyzzy in #5390)",
  "Notable bug fixes\n\nFixed multiple small memory leaks. (@sophiebits in #4983 and @victor-homyakov in #6309)\n\nInput events are handled more reliably in IE 10 and IE 11; spurious events no longer fire when using a placeholder. (@jquense in #4051)\n\nThe componentWillReceiveProps() lifecycle method is now consistently called when context changes. (@milesj in #5787)\n\nReact.cloneElement() doesn’t append slash to an existing key when used inside React.Children.map(). (@ianobermiller in #5892)\n\nReact DOM now supports the cite and profile HTML attributes. (@AprilArcus in #6094 and @saiichihashimoto in #6032)\n\nReact DOM now supports cssFloat, gridRow and gridColumn CSS properties. (@stevenvachon in #6133 and @mnordick in #4779)",
  "React DOM now correctly handles borderImageOutset, borderImageWidth, borderImageSlice, floodOpacity, strokeDasharray, and strokeMiterlimit as unitless CSS properties. (@rofrischmann in #6210 and #6270)\n\nReact DOM now supports the onAnimationStart, onAnimationEnd, onAnimationIteration, onTransitionEnd, and onInvalid events. Support for onLoad has been added to object elements. (@tomduncalf in #5187, @milesj in #6005, and @ara4n in #5781)\n\nReact DOM now defaults to using DOM attributes instead of properties, which fixes a few edge case bugs. Additionally the nullification of values (ex: href={null}) now results in the forceful removal, no longer trying to set to the default value used by browsers in the absence of a value. (@syranide in #1510)",
  "React DOM does not mistakenly coerce children to strings for Web Components. (@jimfb in #5093)\n\nReact DOM now correctly normalizes SVG <use> events. (@edmellum in #5720)\n\nReact DOM does not throw if a <select> is unmounted while its onChange handler is executing. (@sambev in #6028)\n\nReact DOM does not throw in Windows 8 apps. (@Andrew8xx8 in #6063)\n\nReact DOM does not throw when asynchronously unmounting a child with a ref. (@yiminghe in #6095)\n\nReact DOM no longer forces synchronous layout because of scroll position tracking. (@syranide in #2271)\n\nObject.is is used in a number of places to compare values, which leads to fewer false positives, especially involving NaN. In particular, this affects the shallowCompare add-on. (@chicoxyzzy in #6132)",
  "Add-Ons: ReactPerf no longer instruments adding or removing an event listener because they don’t really touch the DOM due to event delegation. (@antoaravinth in #5209)\n\nOther improvements\n\nReact now uses loose-envify instead of envify so it installs fewer transitive dependencies. (@qerub in #6303)\n\nShallow renderer now exposes getMountedInstance(). (@glenjamin in #4918)\n\nShallow renderer now returns the rendered output from render(). (@simonewebdesign in #5411)\n\nReact no longer depends on ES5 shams for Object.create and Object.freeze in older environments. It still, however, requires ES5 shims in those environments. (@dgreensp in #4959)\n\nReact DOM now allows data- attributes with names that start with numbers. (@nLight in #5216)",
  "React DOM adds a new suppressContentEditableWarning prop for components like Draft.js that intentionally manage contentEditable children with React. (@mxstbr in #6112)\n\nReact improves the performance for createClass() on complex specs. (@sophiebits in #5550)\n\n0.14.10 (October 14, 2020)\n\nReact\n\nBackport support for the new JSX transform to 0.14.x. (@lunaruan in #18299 and @gaearon in #20024)\n\n0.14.8 (March 29, 2016)\n\nReact\n\nFixed memory leak when rendering on the server\n\n0.14.7 (January 28, 2016)\n\nReact\n\nFixed bug with <option> tags when using dangerouslySetInnerHTML\n\nFixed memory leak in synthetic event system\n\nReact TestUtils Add-on\n\nFixed bug with calling setState in componentWillMount when using shallow rendering\n\n0.14.6 (January 6, 2016)\n\nReact",
  "0.14.6 (January 6, 2016)\n\nReact\n\nUpdated fbjs dependency to pick up change affecting handling of undefined document.\n\n0.14.5 (December 29, 2015)\n\nReact\n\nMore minor internal changes for better compatibility with React Native\n\n0.14.4 (December 29, 2015)\n\nReact\n\nMinor internal changes for better compatibility with React Native\n\nReact DOM\n\nThe autoCapitalize and autoCorrect props are now set as attributes in the DOM instead of properties to improve cross-browser compatibility\n\nFixed bug with controlled <select> elements not handling updates properly\n\nReact Perf Add-on\n\nSome DOM operation names have been updated for clarity in the output of .printDOM()\n\n0.14.3 (November 18, 2015)\n\nReact DOM\n\nAdded support for nonce attribute for <script> and <style> elements",
  "Added support for reversed attribute for <ol> elements\n\nReact TestUtils Add-on\n\nFixed bug with shallow rendering and function refs\n\nReact CSSTransitionGroup Add-on\n\nFixed bug resulting in timeouts firing incorrectly when mounting and unmounting rapidly\n\nReact on Bower\n\nAdded react-dom-server.js to expose renderToString and renderToStaticMarkup for usage in the browser\n\n0.14.2 (November 2, 2015)\n\nReact DOM\n\nFixed bug with development build preventing events from firing in some versions of Internet Explorer & Edge\n\nFixed bug with development build when using es5-sham in older versions of Internet Explorer\n\nAdded support for integrity attribute\n\nFixed bug resulting in children prop being coerced to a string for custom elements, which was not the desired behavior",
  "Moved react from dependencies to peerDependencies to match expectations and align with react-addons-* packages\n\n0.14.1 (October 28, 2015)\n\nReact DOM\n\nFixed bug where events wouldn't fire in old browsers when using React in development mode\n\nFixed bug preventing use of dangerouslySetInnerHTML with Closure Compiler Advanced mode\n\nAdded support for srcLang, default, and kind attributes for <track> elements\n\nAdded support for color attribute\n\nEnsured legacy .props access on DOM nodes is updated on re-renders\n\nReact TestUtils Add-on\n\nFixed scryRenderedDOMComponentsWithClass so it works with SVG\n\nReact CSSTransitionGroup Add-on\n\nFix bug preventing 0 to be used as a timeout value\n\nReact on Bower\n\nAdded react-dom.js to main to improve compatibility with tooling\n\n0.14.0 (October 7, 2015)",
  "0.14.0 (October 7, 2015)\n\nMajor changes\n\nSplit the main react package into two: react and react-dom. This paves the way to writing components that can be shared between the web version of React and React Native. This means you will need to include both files and some functions have been moved from React to ReactDOM.\n\nAddons have been moved to separate packages (react-addons-clone-with-props, react-addons-create-fragment, react-addons-css-transition-group, react-addons-linked-state-mixin, react-addons-perf, react-addons-pure-render-mixin, react-addons-shallow-compare, react-addons-test-utils, react-addons-transition-group, react-addons-update, ReactDOM.unstable_batchedUpdates).",
  "Stateless functional components - React components were previously created using React.createClass or using ES6 classes. This release adds a new syntax where a user defines a single stateless render function (with one parameter: props) which returns a JSX element, and this function may be used as a component.\n\nRefs to DOM components as the DOM node itself. Previously the only useful thing you can do with a DOM component is call getDOMNode() to get the underlying DOM node. Starting with this release, a ref to a DOM component is the actual DOM node. Note that refs to custom (user-defined) components work exactly as before; only the built-in DOM components are affected by this change.\n\nBreaking changes",
  "Breaking changes\n\nReact.initializeTouchEvents is no longer necessary and has been removed completely. Touch events now work automatically.\n\nAdd-Ons: Due to the DOM node refs change mentioned above, TestUtils.findAllInRenderedTree and related helpers are no longer able to take a DOM component, only a custom component.\n\nThe props object is now frozen, so mutating props after creating a component element is no longer supported. In most cases, React.cloneElement should be used instead. This change makes your components easier to reason about and enables the compiler optimizations mentioned above.\n\nPlain objects are no longer supported as React children; arrays should be used instead. You can use the createFragment helper to migrate, which now returns an array.",
  "Add-Ons: classSet has been removed. Use classnames instead.\n\nWeb components (custom elements) now use native property names. Eg: class instead of className.\n\nDeprecations\n\nthis.getDOMNode() is now deprecated and ReactDOM.findDOMNode(this) can be used instead. Note that in the common case, findDOMNode is now unnecessary since a ref to the DOM component is now the actual DOM node.\n\nsetProps and replaceProps are now deprecated. Instead, call ReactDOM.render again at the top level with the new props.\n\nES6 component classes must now extend React.Component in order to enable stateless function components. The ES3 module pattern will continue to work.\n\nReusing and mutating a style object between renders has been deprecated. This mirrors our change to freeze the props object.",
  "Add-Ons: cloneWithProps is now deprecated. Use React.cloneElement instead (unlike cloneWithProps, cloneElement does not merge className or style automatically; you can merge them manually if needed).\n\nAdd-Ons: To improve reliability, CSSTransitionGroup will no longer listen to transition events. Instead, you should specify transition durations manually using props such as transitionEnterTimeout={500}.\n\nNotable enhancements\n\nAdded React.Children.toArray which takes a nested children object and returns a flat array with keys assigned to each child. This helper makes it easier to manipulate collections of children in your render methods, especially if you want to reorder or slice this.props.children before passing it down. In addition, React.Children.map now returns plain arrays too.",
  "React uses console.error instead of console.warn for warnings so that browsers show a full stack trace in the console. (Our warnings appear when you use patterns that will break in future releases and for code that is likely to behave unexpectedly, so we do consider our warnings to be “must-fix” errors.)",
  "Previously, including untrusted objects as React children could result in an XSS security vulnerability. This problem should be avoided by properly validating input at the application layer and by never passing untrusted objects around your application code. As an additional layer of protection, React now tags elements with a specific ES2015 (ES6) Symbol in browsers that support it, in order to ensure that React never considers untrusted JSON to be a valid element. If this extra security protection is important to you, you should add a Symbol polyfill for older browsers, such as the one included by Babel’s polyfill.\n\nWhen possible, React DOM now generates XHTML-compatible markup.",
  "React DOM now supports these standard HTML attributes: capture, challenge, inputMode, is, keyParams, keyType, minLength, summary, wrap. It also now supports these non-standard attributes: autoSave, results, security.\n\nReact DOM now supports these SVG attributes, which render into namespaced attributes: xlinkActuate, xlinkArcrole, xlinkHref, xlinkRole, xlinkShow, xlinkTitle, xlinkType, xmlBase, xmlLang, xmlSpace.\n\nThe image SVG tag is now supported by React DOM.\n\nIn React DOM, arbitrary attributes are supported on custom elements (those with a hyphen in the tag name or an is=\"...\" attribute).",
  "React DOM now supports these media events on audio and video tags: onAbort, onCanPlay, onCanPlayThrough, onDurationChange, onEmptied, onEncrypted, onEnded, onError, onLoadedData, onLoadedMetadata, onLoadStart, onPause, onPlay, onPlaying, onProgress, onRateChange, onSeeked, onSeeking, onStalled, onSuspend, onTimeUpdate, onVolumeChange, onWaiting.\n\nMany small performance improvements have been made.\n\nMany warnings show more context than before.\n\nAdd-Ons: A shallowCompare add-on has been added as a migration path for PureRenderMixin in ES6 classes.\n\nAdd-Ons: CSSTransitionGroup can now use custom class names instead of appending -enter-active or similar to the transition name.\n\nNew helpful warnings",
  "New helpful warnings\n\nReact DOM now warns you when nesting HTML elements invalidly, which helps you avoid surprising errors during updates.\n\nPassing document.body directly as the container to ReactDOM.render now gives a warning as doing so can cause problems with browser extensions that modify the DOM.\n\nUsing multiple instances of React together is not supported, so we now warn when we detect this case to help you avoid running into the resulting problems.\n\nNotable bug fixes\n\nClick events are handled by React DOM more reliably in mobile browsers, particularly in Mobile Safari.\n\nSVG elements are created with the correct namespace in more cases.",
  "React DOM now renders <option> elements with multiple text children properly and renders <select> elements on the server with the correct option selected.\n\nWhen two separate copies of React add nodes to the same document (including when a browser extension uses React), React DOM tries harder not to throw exceptions during event handling.\n\nUsing non-lowercase HTML tag names in React DOM (e.g., React.createElement('DIV')) no longer causes problems, though we continue to recommend lowercase for consistency with the JSX tag name convention (lowercase names refer to built-in components, capitalized names refer to custom components).",
  "React DOM understands that these CSS properties are unitless and does not append “px” to their values: animationIterationCount, boxOrdinalGroup, flexOrder, tabSize, stopOpacity.\n\nAdd-Ons: When using the test utils, Simulate.mouseEnter and Simulate.mouseLeave now work.\n\nAdd-Ons: ReactTransitionGroup now correctly handles multiple nodes being removed simultaneously.\n\nReact Tools / Babel\n\nBreaking Changes\n\nThe react-tools package and JSXTransformer.js browser file have been deprecated. You can continue using version 0.13.3 of both, but we no longer support them and recommend migrating to Babel, which has built-in support for React and JSX.\n\nNew Features",
  "New Features\n\nBabel 5.8.24 introduces Inlining React elements: The optimisation.react.inlineElements transform converts JSX elements to object literals like {type: 'div', props: ...} instead of calls to React.createElement. This should only be enabled in production, since it disables some development warnings/checks.\n\nBabel 5.8.24 introduces Constant hoisting for React elements: The optimisation.react.constantElements transform hoists element creation to the top level for subtrees that are fully static, which reduces calls to React.createElement and the resulting allocations. More importantly, it tells React that the subtree hasn’t changed so React can completely skip it when reconciling. This should only be enabled in production, since it disables some development warnings/checks.",
  "0.13.3 (May 8, 2015)\n\nReact Core\n\nNew Features\n\nAdded clipPath element and attribute for SVG\n\nImproved warnings for deprecated methods in plain JS classes\n\nBug Fixes\n\nLoosened dangerouslySetInnerHTML restrictions so {__html: undefined} will no longer throw\n\nFixed extraneous context warning with non-pure getChildContext\n\nEnsure replaceState(obj) retains prototype of obj\n\nReact with Add-ons\n\nBug Fixes\n\nTest Utils: Ensure that shallow rendering works when components define contextTypes\n\n0.13.2 (April 18, 2015)\n\nReact Core\n\nNew Features\n\nAdded strokeDashoffset, flexPositive, flexNegative to the list of unitless CSS properties\n\nAdded support for more DOM properties:\n\nscoped - for <style> elements\n\nhigh, low, optimum - for <meter> elements",
  "high, low, optimum - for <meter> elements\n\nunselectable - IE-specific property to prevent user selection\n\nBug Fixes\n\nFixed a case where re-rendering after rendering null didn't properly pass context\n\nFixed a case where re-rendering after rendering with style={null} didn't properly update style\n\nUpdate uglify dependency to prevent a bug in IE8\n\nImproved warnings\n\nReact with Add-Ons\n\nBug Fixes\n\nImmutability Helpers: Ensure it supports hasOwnProperty as an object key\n\nReact Tools\n\nImprove documentation for new options\n\n0.13.1 (March 16, 2015)\n\nReact Core\n\nBug Fixes\n\nDon't throw when rendering empty <select> elements\n\nEnsure updating style works when transitioning from null\n\nReact with Add-Ons\n\nBug Fixes\n\nTestUtils: Don't warn about getDOMNode for ES6 classes",
  "TestUtils: Ensure wrapped full page components (<html>, <head>, <body>) are treated as DOM components\n\nPerf: Stop double-counting DOM components\n\nReact Tools\n\nBug Fixes\n\nFix option parsing for --non-strict-es6module\n\n0.13.0 (March 10, 2015)\n\nReact Core\n\nBreaking Changes\n\nDeprecated patterns that warned in 0.12 no longer work: most prominently, calling component classes without using JSX or React.createElement and using non-component functions with JSX or createElement\n\nMutating props after an element is created is deprecated and will cause warnings in development mode; future versions of React will incorporate performance optimizations assuming that props aren't mutated\n\nStatic methods (defined in statics) are no longer autobound to the component class",
  "ref resolution order has changed slightly such that a ref to a component is available immediately after its componentDidMount method is called; this change should be observable only if your component calls a parent component's callback within your componentDidMount, which is an anti-pattern and should be avoided regardless\n\nCalls to setState in life-cycle methods are now always batched and therefore asynchronous. Previously the first call on the first mount was synchronous.\n\nsetState and forceUpdate on an unmounted component now warns instead of throwing. That avoids a possible race condition with Promises.\n\nAccess to most internal properties has been completely removed, including this._pendingState and this._rootNodeID.\n\nNew Features",
  "New Features\n\nSupport for using ES6 classes to build React components; see the v0.13.0 beta 1 notes for details.\n\nAdded new top-level API React.findDOMNode(component), which should be used in place of component.getDOMNode(). The base class for ES6-based components will not have getDOMNode. This change will enable some more patterns moving forward.\n\nAdded a new top-level API React.cloneElement(el, props) for making copies of React elements – see the v0.13 RC2 notes for more details.\n\nNew ref style, allowing a callback to be used in place of a name: <Photo ref={(c) => this._photo = c} /> allows you to reference the component with this._photo (as opposed to ref=\"photo\" which gives this.refs.photo).",
  "this.setState() can now take a function as the first argument for transactional state updates, such as this.setState((state, props) => ({count: state.count + 1})); – this means that you no longer need to use this._pendingState, which is now gone.\n\nSupport for iterators and immutable-js sequences as children.\n\nDeprecations\n\nComponentClass.type is deprecated. Just use ComponentClass (usually as element.type === ComponentClass).\n\nSome methods that are available on createClass-based components are removed or deprecated from ES6 classes (getDOMNode, replaceState, isMounted, setProps, replaceProps).\n\nReact with Add-Ons\n\nNew Features\n\nReact.addons.createFragment was added for adding keys to entire sets of children.\n\nDeprecations",
  "Deprecations\n\nReact.addons.classSet is now deprecated. This functionality can be replaced with several freely available modules. classnames is one such module.\n\nCalls to React.addons.cloneWithProps can be migrated to use React.cloneElement instead – make sure to merge style and className manually if desired.\n\nReact Tools\n\nBreaking Changes\n\nWhen transforming ES6 syntax, class methods are no longer enumerable by default, which requires Object.defineProperty; if you support browsers such as IE8, you can pass --target es3 to mirror the old behavior\n\nNew Features\n\n--target option is available on the jsx command, allowing users to specify and ECMAScript version to target.\n\nes5 is the default.",
  "es5 is the default.\n\nes3 restores the previous default behavior. An additional transform is added here to ensure the use of reserved words as properties is safe (eg this.static will become this['static'] for IE8 compatibility).\n\nThe transform for the call spread operator has also been enabled.\n\nJSXTransformer\n\nBreaking Changes\n\nThe return value of transform now contains sourceMap as a JS object already, not an instance of SourceMapGenerator.\n\nJSX\n\nBreaking Changes\n\nA change was made to how some JSX was parsed, specifically around the use of > or } when inside an element. Previously it would be treated as a string but now it will be treated as a parse error. The jsx_orphaned_brackets_transformer package on npm can be used to find and fix potential issues in your JSX code.",
  "0.12.2 (December 18, 2014)\n\nReact Core\n\nAdded support for more HTML attributes: formAction, formEncType, formMethod, formTarget, marginHeight, marginWidth\n\nAdded strokeOpacity to the list of unitless CSS properties\n\nRemoved trailing commas (allows npm module to be bundled and used in IE8)\n\nFixed bug resulting in error when passing undefined to React.createElement - now there is a useful warning\n\nReact Tools\n\nJSX-related transforms now always use double quotes for props and displayName\n\n0.12.1 (November 18, 2014)\n\nReact Tools\n\nTypes transform updated with latest support\n\njstransform version updated with improved ES6 transforms\n\nExplicit Esprima dependency removed in favor of using Esprima information exported by jstransform\n\n0.12.0 (October 28, 2014)\n\nReact Core\n\nBreaking Changes",
  "React Core\n\nBreaking Changes\n\nkey and ref moved off props object, now accessible on the element directly\n\nReact is now BSD licensed with accompanying Patents grant\n\nDefault prop resolution has moved to Element creation time instead of mount time, making them effectively static\n\nReact.__internals is removed - it was exposed for DevTools which no longer needs access\n\nComposite Component functions can no longer be called directly - they must be wrapped with React.createFactory first. This is handled for you when using JSX.\n\nNew Features\n\nSpread operator ({...}) introduced to deprecate this.transferPropsTo\n\nAdded support for more HTML attributes: acceptCharset, classID, manifest\n\nDeprecations\n\nReact.renderComponent --> React.render\n\nReact.renderComponentToString --> React.renderToString",
  "React.renderComponentToStaticMarkup --> React.renderToStaticMarkup\n\nReact.isValidComponent --> React.isValidElement\n\nReact.PropTypes.component --> React.PropTypes.element\n\nReact.PropTypes.renderable --> React.PropTypes.node\n\nDEPRECATED React.isValidClass\n\nDEPRECATED instance.transferPropsTo\n\nDEPRECATED Returning false from event handlers to preventDefault\n\nDEPRECATED Convenience Constructor usage as function, instead wrap with React.createFactory\n\nDEPRECATED use of key={null} to assign implicit keys\n\nBug Fixes\n\nBetter handling of events and updates in nested results, fixing value restoration in \"layered\" controlled components\n\nCorrectly treat event.getModifierState as case sensitive\n\nImproved normalization of event.charCode\n\nBetter error stacks when involving autobound methods",
  "Removed DevTools message when the DevTools are installed\n\nCorrectly detect required language features across browsers\n\nFixed support for some HTML attributes:\n\nlist updates correctly now\n\nscrollLeft, scrollTop removed, these should not be specified as props\n\nImproved error messages\n\nReact With Addons\n\nNew Features\n\nReact.addons.batchedUpdates added to API for hooking into update cycle\n\nBreaking Changes\n\nReact.addons.update uses assign instead of copyProperties which does hasOwnProperty checks. Properties on prototypes will no longer be updated correctly.\n\nBug Fixes\n\nFixed some issues with CSS Transitions\n\nJSX\n\nBreaking Changes\n\nEnforced convention: lower case tag names are always treated as HTML tags, upper case tag names are always treated as composite components",
  "JSX no longer transforms to simple function calls\n\nNew Features\n\n@jsx React.DOM no longer required\n\nspread ({...}) operator introduced to allow easier use of props\n\nBug Fixes\n\nJSXTransformer: Make sourcemaps an option when using APIs directly (eg, for react-rails)\n\n0.11.2 (September 16, 2014)\n\nReact Core\n\nNew Features\n\nAdded support for <dialog> element and associated open attribute\n\nAdded support for <picture> element and associated media and sizes attributes\n\nAdded React.createElement API in preparation for React v0.12\n\nReact.createDescriptor has been deprecated as a result\n\nJSX\n\n<picture> is now parsed into React.DOM.picture\n\nReact Tools\n\nUpdate esprima and jstransform for correctness fixes",
  "The jsx executable now exposes a --strip-types flag which can be used to remove TypeScript-like type annotations\n\nThis option is also exposed to require('react-tools').transform as stripTypes\n\n0.11.1 (July 24, 2014)\n\nReact Core\n\nBug Fixes\n\nsetState can be called inside componentWillMount in non-DOM environments\n\nSyntheticMouseEvent.getEventModifierState correctly renamed to getModifierState\n\ngetModifierState correctly returns a boolean\n\ngetModifierState is now correctly case sensitive\n\nEmpty Text node used in IE8 innerHTML workaround is now removed, fixing rerendering in certain cases\n\nJSX\n\nFix duplicate variable declaration in JSXTransformer (caused issues in some browsers)\n\n0.11.0 (July 17, 2014)\n\nReact Core\n\nBreaking Changes",
  "React Core\n\nBreaking Changes\n\ngetDefaultProps() is now called once per class and shared across all instances\n\nMyComponent() now returns a descriptor, not an instance\n\nReact.isValidComponent and React.PropTypes.component validate descriptors, not component instances\n\nCustom propType validators should return an Error instead of logging directly\n\nNew Features\n\nRendering to null\n\nKeyboard events include normalized e.key and e.getModifierState() properties\n\nNew normalized onBeforeInput event\n\nReact.Children.count has been added as a helper for counting the number of children\n\nBug Fixes\n\nRe-renders are batched in more cases\n\nEvents: e.view properly normalized",
  "Events: e.view properly normalized\n\nAdded Support for more HTML attributes (coords, crossOrigin, download, hrefLang, mediaGroup, muted, scrolling, shape, srcSet, start, useMap)\n\nImproved SVG support\n\nChanging className on a mounted SVG component now works correctly\n\nAdded support for elements mask and tspan\n\nAdded support for attributes dx, dy, fillOpacity, fontFamily, fontSize, markerEnd, markerMid, markerStart, opacity, patternContentUnits, patternUnits, preserveAspectRatio, strokeDasharray, strokeOpacity\n\nCSS property names with vendor prefixes (Webkit, ms, Moz, O) are now handled properly\n\nDuplicate keys no longer cause a hard error; now a warning is logged (and only one of the children with the same key is shown)",
  "img event listeners are now unbound properly, preventing the error \"Two valid but unequal nodes with the same data-reactid\"\n\nAdded explicit warning when missing polyfills\n\nReact With Addons\n\nPureRenderMixin: a mixin which helps optimize \"pure\" components\n\nPerf: a new set of tools to help with performance analysis\n\nUpdate: New $apply command to transform values\n\nTransitionGroup bug fixes with null elements, Android\n\nReact NPM Module\n\nNow includes the pre-built packages under dist/.\n\nenvify is properly listed as a dependency instead of a peer dependency\n\nJSX\n\nAdded support for namespaces, eg <Components.Checkbox />\n\nJSXTransformer\n\nEnable the same harmony features available in the command line with <script type=\"text/jsx;harmony=true\">",
  "Scripts are downloaded in parallel for more speed. They are still executed in order (as you would expect with normal script tags)\n\nFixed a bug preventing sourcemaps from working in Firefox\n\nReact Tools Module\n\nImproved readme with usage and API information\n\nImproved ES6 transforms available with --harmony option\n\nAdded --source-map-inline option to the jsx executable\n\nNew transformWithDetails API which gives access to the raw sourcemap data\n\n0.10.0 (March 21, 2014)\n\nReact Core\n\nNew Features\n\nAdded warnings to help migrate towards descriptors\n\nMade it possible to server render without React-related markup (data-reactid, data-react-checksum). This DOM will not be mountable by React. Read the docs for React.renderComponentToStaticMarkup\n\nAdded support for more attributes:",
  "Added support for more attributes:\n\nsrcSet for <img> to specify images at different pixel ratios\n\ntextAnchor for SVG\n\nBug Fixes\n\nEnsure all void elements don’t insert a closing tag into the markup.\n\nEnsure className={false} behaves consistently\n\nEnsure this.refs is defined, even if no refs are specified.\n\nAddons\n\nupdate function to deal with immutable data. Read the docs\n\nreact-tools\n\nAdded an option argument to transform function. The only option supported is harmony, which behaves the same as jsx --harmony on the command line. This uses the ES6 transforms from jstransform.\n\n0.9.0 (February 20, 2014)\n\nReact Core\n\nBreaking Changes\n\nThe lifecycle methods componentDidMount and componentDidUpdate no longer receive the root node as a parameter; use this.getDOMNode() instead",
  "Whenever a prop is equal to undefined, the default value returned by getDefaultProps will now be used instead\n\nReact.unmountAndReleaseReactRootNode was previously deprecated and has now been removed\n\nReact.renderComponentToString is now synchronous and returns the generated HTML string\n\nFull-page rendering (that is, rendering the <html> tag using React) is now supported only when starting with server-rendered markup\n\nOn mouse wheel events, deltaY is no longer negated\n\nWhen prop types validation fails, a warning is logged instead of an error thrown (with the production build of React, type checks are now skipped for performance)\n\nOn input, select, and textarea elements, .getValue() is no longer supported; use .getDOMNode().value instead",
  "this.context on components is now reserved for internal use by React\n\nNew Features\n\nReact now never rethrows errors, so stack traces are more accurate and Chrome's purple break-on-error stop sign now works properly\n\nAdded support for SVG tags defs, linearGradient, polygon, radialGradient, stop\n\nAdded support for more attributes:\n\ncrossOrigin for CORS requests\n\ndownload and hrefLang for <a> tags\n\nmediaGroup and muted for <audio> and <video> tags\n\nnoValidate and formNoValidate for forms\n\nproperty for Open Graph <meta> tags\n\nsandbox, seamless, and srcDoc for <iframe> tags\n\nscope for screen readers\n\nspan for <colgroup> tags\n\nAdded support for defining propTypes in mixins\n\nAdded any, arrayOf, component, oneOfType, renderable, shape to React.PropTypes",
  "Added support for statics on component spec for static component methods\n\nOn all events, .currentTarget is now properly set\n\nOn keyboard events, .key is now polyfilled in all browsers for special (non-printable) keys\n\nOn clipboard events, .clipboardData is now polyfilled in IE\n\nOn drag events, .dragTransfer is now present\n\nAdded support for onMouseOver and onMouseOut in addition to the existing onMouseEnter and onMouseLeave events\n\nAdded support for onLoad and onError on <img> elements\n\nAdded support for onReset on <form> elements\n\nThe autoFocus attribute is now polyfilled consistently on input, select, and textarea\n\nBug Fixes\n\nReact no longer adds an __owner__ property to each component's props object; passed-in props are now never mutated",
  "When nesting top-level components (e.g., calling React.renderComponent within componentDidMount), events now properly bubble to the parent component\n\nFixed a case where nesting top-level components would throw an error when updating\n\nPassing an invalid or misspelled propTypes type now throws an error\n\nOn mouse enter/leave events, .target, .relatedTarget, and .type are now set properly\n\nOn composition events, .data is now properly normalized in IE9 and IE10\n\nCSS property values no longer have px appended for the unitless properties columnCount, flex, flexGrow, flexShrink, lineClamp, order, widows\n\nFixed a memory leak when unmounting children with a componentWillUnmount handler\n\nFixed a memory leak when renderComponentToString would store event handlers",
  "Fixed an error that could be thrown when removing form elements during a click handler\n\nBoolean attributes such as disabled are rendered without a value (previously disabled=\"true\", now simply disabled)\n\nkey values containing . are now supported\n\nShortened data-reactid values for performance\n\nComponents now always remount when the key property changes\n\nEvent handlers are attached to document only when necessary, improving performance in some cases\n\nEvents no longer use .returnValue in modern browsers, eliminating a warning in Chrome\n\nscrollLeft and scrollTop are no longer accessed on document.body, eliminating a warning in Chrome\n\nGeneral performance fixes, memory optimizations, improvements to warnings and error messages\n\nReact with Addons",
  "React with Addons\n\nReact.addons.TestUtils was added to help write unit tests\n\nReact.addons.TransitionGroup was renamed to React.addons.CSSTransitionGroup\n\nReact.addons.TransitionGroup was added as a more general animation wrapper\n\nReact.addons.cloneWithProps was added for cloning components and modifying their props\n\nBug fix for adding back nodes during an exit transition for CSSTransitionGroup\n\nBug fix for changing transitionLeave in CSSTransitionGroup\n\nPerformance optimizations for CSSTransitionGroup\n\nOn checkbox <input> elements, checkedLink is now supported for two-way binding\n\nJSX Compiler and react-tools Package\n\nWhitespace normalization has changed; now space between two tags on the same line will be preserved, while newlines between two tags will be removed",
  "The react-tools npm package no longer includes the React core libraries; use the react package instead.\n\ndisplayName is now added in more cases, improving error messages and names in the React Dev Tools\n\nFixed an issue where an invalid token error was thrown after a JSX closing tag\n\nJSXTransformer now uses source maps automatically in modern browsers\n\nJSXTransformer error messages now include the filename and problematic line contents when a file fails to parse\n\n0.8.0 (December 19, 2013)\n\nReact\n\nAdded support for more attributes:\n\nrows & cols for <textarea>\n\ndefer & async for <script>\n\nloop for <audio> & <video>\n\nautoCorrect for form fields (a non-standard attribute only supported by mobile WebKit)\n\nImproved error messages\n\nFixed Selection events in IE11\n\nAdded onContextMenu events",
  "Added onContextMenu events\n\nReact with Addons\n\nFixed bugs with TransitionGroup when children were undefined\n\nAdded support for onTransition\n\nreact-tools\n\nUpgraded jstransform and esprima-fb\n\nJSXTransformer\n\nAdded support for use in IE8\n\nUpgraded browserify, which reduced file size by ~65KB (16KB gzipped)\n\n0.5.2, 0.4.2 (December 18, 2013)\n\nReact\n\nFixed a potential XSS vulnerability when using user content as a key: CVE-2013-7035\n\n0.5.1 (October 29, 2013)\n\nReact\n\nFixed bug with <input type=\"range\"> and selection events.\n\nFixed bug with selection and focus.\n\nMade it possible to unmount components from the document root.\n\nFixed bug for disabled attribute handling on non-<input> elements.\n\nReact with Addons\n\nFixed bug with transition and animation event detection.\n\n0.5.0 (October 16, 2013)",
  "0.5.0 (October 16, 2013)\n\nReact\n\nMemory usage improvements - reduced allocations in core which will help with GC pauses\n\nPerformance improvements - in addition to speeding things up, we made some tweaks to stay out of slow path code in V8 and Nitro.\n\nStandardized prop -> DOM attribute process. This previously resulting in additional type checking and overhead as well as confusing cases for users. Now we will always convert your value to a string before inserting it into the DOM.\n\nSupport for Selection events.\n\nSupport for Composition events.\n\nSupport for additional DOM properties (charSet, content, form, httpEquiv, rowSpan, autoCapitalize).\n\nSupport for additional SVG properties (rx, ry).\n\nSupport for using getInitialState and getDefaultProps in mixins.\n\nSupport mounting into iframes.",
  "Support mounting into iframes.\n\nBug fixes for controlled form components.\n\nBug fixes for SVG element creation.\n\nAdded React.version.\n\nAdded React.isValidClass - Used to determine if a value is a valid component constructor.\n\nRemoved React.autoBind - This was deprecated in v0.4 and now properly removed.\n\nRenamed React.unmountAndReleaseReactRootNode to React.unmountComponentAtNode.\n\nBegan laying down work for refined performance analysis.\n\nBetter support for server-side rendering - react-page has helped improve the stability for server-side rendering.\n\nMade it possible to use React in environments enforcing a strict Content Security Policy. This also makes it possible to use React to build Chrome extensions.\n\nReact with Addons (New!)",
  "React with Addons (New!)\n\nIntroduced a separate build with several \"addons\" which we think can help improve the React experience. We plan to deprecate this in the long-term, instead shipping each as standalone pieces. Read more in the docs.\n\nJSX\n\nNo longer transform class to className as part of the transform! This is a breaking change - if you were using class, you must change this to className or your components will be visually broken.\n\nAdded warnings to the in-browser transformer to make it clear it is not intended for production use.\n\nImproved compatibility for Windows\n\nImproved support for maintaining line numbers when transforming.\n\n0.4.1 (July 26, 2013)\n\nReact\n\nsetState callbacks are now executed in the scope of your component.\n\nclick events now work on Mobile Safari.",
  "click events now work on Mobile Safari.\n\nPrevent a potential error in event handling if Object.prototype is extended.\n\nDon't set DOM attributes to the string \"undefined\" on update when previously defined.\n\nImproved support for <iframe> attributes.\n\nAdded checksums to detect and correct cases where server-side rendering markup mismatches what React expects client-side.\n\nJSXTransformer\n\nImproved environment detection so it can be run in a non-browser environment.\n\n0.4.0 (July 17, 2013)\n\nReact\n\nSwitch from using id attribute to data-reactid to track DOM nodes. This allows you to integrate with other JS and CSS libraries more easily.\n\nSupport for more DOM elements and attributes (e.g., <canvas>)",
  "Improved server-side rendering APIs. React.renderComponentToString(<component>, callback) allows you to use React on the server and generate markup which can be sent down to the browser.\n\nprop improvements: validation and default values. Read our blog post for details...\n\nSupport for the key prop, which allows for finer control over reconciliation. Read the docs for details...\n\nRemoved React.autoBind. Read our blog post for details...\n\nImprovements to forms. We've written wrappers around <input>, <textarea>, <option>, and <select> in order to standardize many inconsistencies in browser implementations. This includes support for defaultValue, and improved implementation of the onChange event, and circuit completion. Read the docs for details...",
  "We've implemented an improved synthetic event system that conforms to the W3C spec.\n\nUpdates to your component are batched now, which may result in a significantly faster re-render of components. this.setState now takes an optional callback as it's second parameter. If you were using onClick={this.setState.bind(this, state)} previously, you'll want to make sure you add a third parameter so that the event is not treated as the callback.\n\nJSX\n\nSupport for comment nodes <div>{/* this is a comment and won't be rendered */}</div>",
  "Children are now transformed directly into arguments instead of being wrapped in an array E.g. <div><Component1/><Component2/></div> is transformed into React.DOM.div(null, Component1(null), Component2(null)). Previously this would be transformed into React.DOM.div(null, [Component1(null), Component2(null)]). If you were using React without JSX previously, your code should still work.\n\nreact-tools\n\nFixed a number of bugs when transforming directories\n\nNo longer re-write require()s to be relative unless specified\n\n0.3.3 (June 20, 2013)\n\nReact\n\nAllow reusing the same DOM node to render different components. e.g. React.renderComponent(<div/>, domNode); React.renderComponent(<span/>, domNode); will work now.\n\nJSX",
  "JSX\n\nImproved the in-browser transformer so that transformed scripts will execute in the expected scope. The allows components to be defined and used from separate files.\n\nreact-tools\n\nUpgrade Commoner so require statements are no longer relativized when passing through the transformer. This was a feature needed when building React, but doesn't translate well for other consumers of bin/jsx.\n\nUpgraded our dependencies on Commoner and Recast so they use a different directory for their cache.\n\nFreeze our Esprima dependency.\n\n0.3.2 (May 31, 2013)\n\nJSX\n\nImproved compatibility with other coding styles (specifically, multiple assignments with a single var).\n\nreact-tools\n\nSwitch from using the browserified build to shipping individual modules. This allows react-tools to be used with browserify.",
  "0.3.1 (May 30, 2013)\n\nreact-tools\n\nFix bug in packaging resulting in broken module.\n\n0.3.0 (May 29, 2013)\n\nInitial public release"
]